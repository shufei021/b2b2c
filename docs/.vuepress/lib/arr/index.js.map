{"version":3,"file":"index.js","sources":["../../../src/lib/obj/lib/core.js","../../../src/lib/arr/lib/core.js","../../../src/lib/arr/index.js"],"sourcesContent":["/*\r\n * @Description: Obejct 相关的工具函数\r\n * @Author: shufei\r\n * @Date: 2020-11-11 19:20:15\r\n * @LastEditTime: 2020-12-16 11:40:45\r\n * @LastEditors: shufei\r\n */\r\n\r\n/**\r\n * 合并两个对象\r\n * @param { Object } f : 需要合并的第一个对象\r\n * @param { Object } s ：需要合并的第二个对象\r\n * @return Object 合并后的对象\r\n */\r\nexport const merge = function (f, s) {\r\n    for (var i in s) {\r\n        f[i] = f[i] && f[i].toString() === '[object Object]' ? merge(f[i], s[i]) : (f[i] = s[i])\r\n    }\r\n    return f\r\n}\r\n/**\r\n * 深度合并多个对象\r\n * @param  {Object} a\r\n */\r\nexport const mergeMultiple = function (...a) {\r\n    //参数长度\r\n    let l = a.length\r\n    //没有传参 抛出错误\r\n    if (l == 0) throw Error('Pass at least one object parameter')\r\n    //参数传一个 直接返回这个\r\n    if (l == 1) return a[0]\r\n    //参数传一个 直接返回合并后的对象\r\n    if (l == 2) return merge(a[0], a[1])\r\n    //参数大于2，则执行递归合并，并在长度为2时，返回合并对象\r\n    while (a.length > 2) {\r\n        a.splice(0, 2, merge(a[0], a[1]))\r\n        if (a.length == 2) return merge(a[0], a[1])\r\n    }\r\n}\r\n\r\n/**\r\n * 在两个变量之间进行深度比较以确定它们是否全等。\r\n * @param {Object} a\r\n * @param {Object} b\r\n */\r\nexport const equals = function (a, b) {\r\n    if (a === b) return true\r\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\r\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\r\n    if (a.prototype !== b.prototype) return false\r\n    let keys = Object.keys(a)\r\n    if (keys.length !== Object.keys(b).length) return false\r\n    return keys.every(k => equals(a[k], b[k]))\r\n}\r\n\r\n/**\r\n * 浅拷贝\r\n * @param {*} p\r\n */\r\nexport const copy = function (p) {\r\n    var o = {}\r\n    for (var i in p) {\r\n        o[i] = p[i]\r\n    }\r\n    return o\r\n}\r\n\r\n/**\r\n * 递归深拷贝\r\n */\r\nexport const deepCopy = function (p, c) {\r\n    var c = c || {}\r\n    for (var i in p) {\r\n        if (Array.isArray(p[i]) || Object.prototype.toString.call(p[i]).slice(8, -1) === 'Object') {\r\n            deepCopy(p[i], (c[i] = Array.isArray(p[i]) ? [] : {}))\r\n        } else {\r\n            c[i] = p[i]\r\n        }\r\n    }\r\n    return c\r\n}\r\n\r\n/**\r\n * @description: 树转数组\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const treeToArr = function (json, splitFlag) {\r\n    let res = []\r\n    let carry = function (_arr, name) {\r\n        for (let i = 0; i < _arr.length; i++) {\r\n            let _name = name ? name + splitFlag + _arr[i].name : _arr[i].name\r\n            if (_arr[i].children) {\r\n                carry(_arr[i].children, _name)\r\n            } else {\r\n                if (name) {\r\n                    res.push(_name)\r\n                } else {\r\n                    res.push(_arr[i].name)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    carry([json])\r\n    return res\r\n}\r\n\r\n/**\r\n * @description: 根据条件删除数组中的值 并改变该对象\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const delObjBy = function (obj, cb) {\r\n    if (typeof cb === 'string') delete obj[cb]\r\n    for (let k in obj) {\r\n        if (typeof cb === 'function' && cb(obj[k])) {\r\n            delete obj[k]\r\n        } else if (Array.isArray(cb)) {\r\n            cb.includes(k) && delete obj[k]\r\n        }\r\n    }\r\n}\r\n","import { equals } from '../../obj/lib/core'\r\n/**\r\n * 1.\r\n * 数组并集\r\n * 多数组并集传值：[...a,...b,...c]\r\n * 已优化\r\n * @param {Array} a：数组\r\n * @param {Array} b：数组\r\n * @param {String} k：键名\r\n */\r\nexport const union = function (a, b, k) {\r\n    return a.concat(b.filter(i => (k ? !a.map(i => i[k]).includes(i[k]) : !a.includes(i))))\r\n}\r\n\r\n/**\r\n * 2.\r\n * 数组交集\r\n * 多数组交集传值：[...a,...b,...c]\r\n * 已优化\r\n * @param {Array} a：数组\r\n * @param {Array} b：数组\r\n * @param {String} k：键名\r\n */\r\nexport const intersection = function (a, b, k) {\r\n    return a.filter(t => (k ? b.map(i => i[k]).includes(t[k]) : b.includes(t)))\r\n}\r\n\r\n/**\r\n * 3.\r\n * 数组差集\r\n * 多数组差集传值：[...a,...b,...c]\r\n * 已优化\r\n * @param {Array} a：数组\r\n * @param {Array} b：数组\r\n * @param {String} k：键名\r\n */\r\nexport const except = function (a, b, k) {\r\n    return [...a, ...b].filter(i => ![a, b].every(t => (k ? t.map(i => i[k]).includes(i[k]) : t.includes(i))))\r\n}\r\n\r\n/**\r\n * 4.\r\n * 数组求和\r\n * 多数组求和传值：[...a,...b,...c]\r\n * 已优化\r\n * @param {Array} a：数组\r\n * @param {String} k：键名\r\n */\r\nexport const sum = function (a, k) {\r\n    return a.reduce((p, c) => p + (k ? c[k] || 0 : c), 0)\r\n}\r\n\r\n/**\r\n * 5.\r\n * 数组去重\r\n * 多数组去重传值：[...a,...b,...c]\r\n * 已优化\r\n * @param {Array} a：数组\r\n * @param {String} k：键名\r\n */\r\nexport const unique = function (a, k) {\r\n    return k ? a.reduce((p, c) => (p.map(i => i[k]).includes(c[k]) ? p : [...p, c]), []) : [...new Set(a)]\r\n}\r\n\r\n/**\r\n * 6.\r\n * 数组转树\r\n * @param {Array} arr ：json数组\r\n * @param {String} id ：每项的id\r\n * @param {String} link ：pid的名字\r\n */\r\nexport const arrayToTree = function (arr, id = null, link = 'pid') {\r\n    return arr.filter(i => i[link] === id).map(i => ({ ...i, children: arrayToTree(arr, i.id, link) }))\r\n}\r\n\r\n/**\r\n * 7.\r\n * 指定数组中获取随机数(1位)\r\n * 不限json数组\r\n * @param {Array} arr :数组\r\n */\r\nexport const sample = function (arr) {\r\n    return arr[Math.floor(Math.random() * arr.length)]\r\n}\r\n\r\n/**\r\n * 8.\r\n * 生成两数之间指定长度的随机数组(重复)\r\n * @param {Number} min ：起始值\r\n * @param {Number} max ：结束值\r\n * @param {Number} n ：指定长度\r\n */\r\nexport const randomArrayInRangeRepeat = function (min, max, n = 1) {\r\n    return Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min)\r\n}\r\n\r\n/**\r\n * 9.\r\n * 生成两数之间指定长度的随机数组(不重复)\r\n * @param {Number} start : 起始值\r\n * @param {Number} stop : 结束值\r\n * @param {Number} len : 随机个数\r\n */\r\nexport const randomArrayInRange = function (start, end, len = 1) {\r\n    // 区间数组\r\n    let arr = Array(end - start + 1)\r\n        .fill(0)\r\n        .map((_, i) => start + i)\r\n    let n = len > arr.length ? arr.length : len\r\n    let ret = []\r\n    while (ret.length != n) {\r\n        let random = arr[Math.floor(Math.random() * arr.length)]\r\n        !ret.includes(random) && ret.push(random)\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * 10.\r\n * 序列生成器(指定范围)\r\n * @param {Number} start : 起始值\r\n * @param {Number} stop : 结束值\r\n * @param {Number} step : 步长\r\n */\r\nexport const range = function (start, stop, step) {\r\n    return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step)\r\n}\r\n\r\n/**\r\n * 11.\r\n * 指定深度扁平化数组\r\n * @param {Array} arr :扁平化的数组\r\n * @param {Number} depth ：扁平化的层级\r\n */\r\nexport const flatten = function (arr, depth = 1) {\r\n    return arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v), [])\r\n}\r\n\r\n/**\r\n * 12.\r\n * 去除数组中的无效/无用值\r\n * @param {Array} arr : 数组\r\n */\r\nexport const compact = arr => arr.filter(Boolean)\r\n\r\n/**\r\n * 13.\r\n *检测数值出现次数\r\n * @param {Array} a：数组\r\n * @param {String} k：键名\r\n * @param {any} v：键值\r\n */\r\nexport const countOccurrences = (a, k, v) => a.reduce((p, c) => ((v ? c[k] === v : c === k) ? p + 1 : p), 0)\r\n\r\n/**\r\n * 14.\r\n * 数组平均数\r\n * @param {Array} arr:数组\r\n * @param {Function} fn:函数\r\n */\r\nexport const average = function (arr, fn) {\r\n    let isNumber = [...arguments].every(i => !isNaN(parseFloat(i)) && isFinite(i))\r\n    let count = isNumber ? arguments.length : arr.length\r\n    return (isNumber ? [...arguments] : fn ? arr.map(typeof fn === 'function' ? fn : val => val[fn]) : arr).reduce((acc, val) => acc + val * 1, 0) / count\r\n}\r\n\r\n/**\r\n * 15.\r\n * 数组转 CSV 格式（带空格的字符串）\r\n * @param {Array} arr:数组\r\n * @param {String} delimiter:分隔符\r\n */\r\nexport const arrayToCSV = (arr, delimiter = ',') => arr.map(v => v.map(x => `\"${x}\"`).join(delimiter)).join('\\n')\r\n\r\n/**\r\n * 16.\r\n * 返回数组中某值的所有索引\r\n * @param {Array} a:数组\r\n * @param {String} k: 键名\r\n * @param {String} v: 键值\r\n */\r\nexport const indexOfAll = (a, k, v) => a.reduce((p, c, i) => ((v ? c[k] === v : c === k) ? [...p, i] : p), [])\r\n\r\n/**\r\n * @description: 一维数组转二维数组 (分组)\r\n * @param {Array} arr:数组\r\n * @param {String | Number} num: 平分基数\r\n * @return {*}\r\n */\r\nexport const group = function (arr, num) {\r\n    return Array(Math.ceil(arr.length / num))\r\n        .fill(0)\r\n        .reduce((p, _, i) => (p.push(arr.slice(i * num, (i + 1) * num)), p), [])\r\n}\r\n\r\n/**\r\n * @description: 交换数组中任一两个值的位置\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const changePostion = function (arr, oldIndex, newIndex) {\r\n    arr.splice(oldIndex, 1, arr.splice(newIndex, 1, arr[oldIndex])[0])\r\n}\r\n\r\n/**\r\n * @description: 交换数组中任一两个值的位置\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const change = function (arr, oldIndex, newIndex) {\r\n    arr[newIndex] = [arr[oldIndex], (arr[oldIndex] = arr[newIndex])][0]\r\n}\r\n/**\r\n * @description: 指定数组中某个索引的值 取出来，再插入到数组的任一位置\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const inset = function (arr, oldIndex, newIndex) {\r\n    arr.splice(newIndex, 0, arr.splice(oldIndex, 1)[0])\r\n}\r\n\r\n/**\r\n * @description: 一维数组分类归档 根据某个key\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const categoryArchive = function (arr, key) {\r\n    return Array.from(new Set(arr.map(i => i[key]))).reduce((p, c) => (p.push(arr.filter(i => i[key] === c)), p), [])\r\n}\r\n\r\n/**\r\n * @description: 数组内是否有重复值\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const isRepeat = function (arr) {\r\n    try {\r\n        for (let i = 0; i < arr.length; i++) {\r\n            for (let k = i + 1; k < arr.length; k++) {\r\n                if (equals(arr[i], arr[k])) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    } catch (e) {\r\n        return arr.length !== unique(arr).length\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 根据条件删除数组中的值 并改变该数组\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const delBy = function (arr, cb) {\r\n    for (let i = arr.length - 1; i >= 0; i--) {\r\n        if (typeof cb === 'function') {\r\n            cb(arr[i]) && arr.splice(i, 1)\r\n        } else if (Array.isArray(cb)) {\r\n            cb.indexOf(arr[i]) > -1 && arr.splice(i, 1)\r\n        } else if (arr[i] === cb) {\r\n            arr.splice(i, 1)\r\n        } else if (Object.prototype.toString.call(cb).slice(8, -1) === 'Object') {\r\n            let item = arr[i]\r\n            for (let k in cb) {\r\n                if (Array.isArray(cb[k])) {\r\n                    if (cb[k].indexOf(item[k]) > -1) {\r\n                        arr.splice(i, 1)\r\n                    }\r\n                } else {\r\n                    if (cb[k] === item[k]) {\r\n                        arr.splice(i, 1)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","/*\r\n * @Description: array  (数组) 构造类 Rarr\r\n * @Author: shufei\r\n * @Date: 2020-08-24 08:26:55\r\n * @LastEditTime: 2020-12-04 08:50:02\r\n * @LastEditors: shufei\r\n */\r\nimport * as input from './lib/core'\r\nfunction Rarr() {\r\n    if (!(this instanceof Rarr)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nRarr.prototype = input\r\nexport default new Rarr()\r\n"],"names":["equals","a","b","Date","getTime","_typeof","prototype","keys","Object","length","every","k","unique","reduce","p","c","map","i","includes","Set","arrayToTree","arr","id","link","filter","children","flatten","depth","v","concat","Array","isArray","Rarr","this","TypeError","t","Math","floor","random","min","max","n","from","start","end","len","fill","_","ret","push","stop","step","Boolean","fn","isNumber","arguments","isNaN","parseFloat","isFinite","count","val","acc","delimiter","x","join","num","ceil","slice","oldIndex","newIndex","splice","key","e","cb","indexOf","toString","call","item"],"mappings":"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"}