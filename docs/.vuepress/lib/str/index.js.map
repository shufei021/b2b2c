{"version":3,"file":"index.js","sources":["../../../src/lib/str/index.js","../../../src/lib/str/lib/core.js"],"sourcesContent":["/*\r\n * @Description: Rstr\r\n * @Author: shufei\r\n * @Date: 2020-11-11 19:05:41\r\n * @LastEditTime: 2020-12-04 09:58:23\r\n * @LastEditors: shufei\r\n */\r\n\r\nimport * as str from './lib/core'\r\n\r\nfunction Rstr() {\r\n    if (!(this instanceof Rstr)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nRstr.prototype = str\r\nexport default new Rstr()\r\n","/*\r\n * @Description: 字符串相关的工具函数\r\n * @Author: shufei\r\n * @Date: 2020-11-11 19:05:49\r\n * @LastEditTime: 2020-11-16 17:17:55\r\n * @LastEditors: shufei\r\n */\r\n\r\n/**\r\n * @description: capitalize：字符串首位大写\r\n * @param : str 需处理的字符串\r\n * @return {*}\r\n * @param {*} str\r\n */\r\nexport const capitalize = function (str) {\r\n    return str.charAt(0).toUpperCase() + str.slice(1)\r\n}\r\n\r\n/**\r\n * 寻找字符串中指定字符的所有索引位置\r\n * find all the substr positio\r\n * @param {*} str\r\n * @param {*} substr\r\n */\r\nexport const substrPosition = function (str, substr) {\r\n    let position_arr = []\r\n    let index = str.indexOf(substr)\r\n    while (index != -1) {\r\n        position_arr.push(index)\r\n        index = str.indexOf(substr, index + 1)\r\n    }\r\n    return position_arr\r\n}\r\n\r\n/**\r\n * @description: 生产GUID的方法\r\n * @param :\r\n * @return {string}:guid\r\n */\r\nexport const guid = function () {\r\n    function S4() {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1)\r\n    }\r\n    return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4()\r\n}\r\n\r\n/**\r\n * @description:删除字符串中的HTMl标签\r\n * @param :\r\n * @return {*}\r\n * @param {*} str\r\n */\r\nexport const stripHTMLTags = function (str) {\r\n    return str.replace(/<[^>]*>/g, '')\r\n}\r\n\r\n/**\r\n * 获取字html字符串中的img的地址\r\n * @param { String } s : 带img标签的html片段字符串\r\n * @return Array\r\n */\r\nexport const getImgSrc = function (s) {\r\n    let r = []\r\n    s.replace(/<img [^>]*src=['\"]([^'\"]+)[^>]*>/gi, function (_, c) {\r\n        r.push(c)\r\n    })\r\n    return r\r\n}\r\n\r\n/**\r\n * @description: 防御xss转义\r\n * @param :\r\n * @return {*}\r\n * @param {*} str\r\n */\r\nexport const escapeHTML = function (str) {\r\n    return str.replace(\r\n        /[&<>'\"]/g,\r\n        tag =>\r\n            ({\r\n                '&': '&amp;',\r\n                '<': '&lt;',\r\n                '>': '&gt;',\r\n                '\"': '&quot;'\r\n            }[tag] || tag)\r\n    )\r\n}\r\n\r\n/**\r\n * @description: 手机号码隐藏中间4位\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const phoneHidden = function (phone) {\r\n    let phoneStr = phone + ''\r\n    return phoneStr.replace(phoneStr.slice(3, -4), '******')\r\n}\r\n"],"names":["Rstr","this","TypeError","prototype","str","charAt","toUpperCase","slice","substr","position_arr","index","indexOf","push","S4","Math","random","toString","substring","replace","s","r","_","c","tag","phone","phoneStr"],"mappings":"mOAUA,SAASA,SACCC,gBAAgBD,GAAO,MAAM,IAAIE,UAAU,4CAErDF,EAAKG,mDCCqB,SAAUC,UACzBA,EAAIC,OAAO,GAAGC,cAAgBF,EAAIG,MAAM,mBASrB,SAAUH,EAAKI,WACrCC,EAAe,GACfC,EAAQN,EAAIO,QAAQH,IACP,GAAVE,GACHD,EAAaG,KAAKF,GAClBA,EAAQN,EAAIO,QAAQH,EAAQE,EAAQ,UAEjCD,QAQS,oBACPI,WAC0B,OAArB,EAAIC,KAAKC,UAAuB,GAAGC,SAAS,IAAIC,UAAU,UAEjEJ,IAAOA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAO,IAAMA,IAAOA,IAAOA,mBASvD,SAAUT,UAC5BA,EAAIc,QAAQ,WAAY,eAQV,SAAUC,OAC3BC,EAAI,UACRD,EAAED,QAAQ,qCAAsC,SAAUG,EAAGC,GACzDF,EAAER,KAAKU,KAEJF,cASe,SAAUhB,UACzBA,EAAIc,QACP,WACA,SAAAK,SACK,KACQ,YACA,WACA,WACA,UACPA,IAAQA,iBASK,SAAUC,GAC7BC,GAAmB,UAChBA,EAASP,QAAQO,EAASlB,MAAM,GAAI,GAAI,aDjFpC,IAAIP"}