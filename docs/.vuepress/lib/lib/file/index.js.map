{"version":3,"file":"index.js","sources":["../../../src/lib/file/base64ToBlob.js","../../../src/lib/file/fileToBase64.js","../../../src/lib/file/index.js","../../../src/lib/file/bytesFormat.js","../../../src/lib/file/base64ToFile.js","../../../src/lib/file/blobToBase64.js","../../../src/lib/file/blobToFile.js","../../../src/lib/file/fileToBlob.js","../../../src/lib/file/downloadByBase64.js","../../../src/lib/file/downloadByImgLink.js","../../../src/lib/file/downloadByImgSelector.js"],"sourcesContent":["/**\r\n * @description: Base64 to Blob\r\n * @param { dataURL } base64 : file base64\r\n * @return { Blob }\r\n */\r\nconst base64ToBlob = function (base64) {\r\n    let mime = base64.split(',')[0].split(':')[1].split(';')[0] //mime type\r\n    let byte = window.atob(base64.split(',')[1]) //base64 decode\r\n    let arrayBuffer = new ArrayBuffer(byte.length) // create buffer array\r\n    let intArray = new Uint8Array(arrayBuffer) // create view\r\n    for (let i = 0, len = byte.length; i < len; i++) {\r\n        intArray[i] = byte.charCodeAt(i)\r\n    }\r\n    return new Blob([intArray], { type: mime })\r\n}\r\nexport default base64ToBlob\r\n","/**\r\n * @description: File to Base64\r\n * @param { File } file :  File\r\n * @return { Promise }\r\n */\r\nconst fileToBase64 = function (file) {\r\n    return new Promise(resole => {\r\n        let reader = new FileReader()\r\n        reader.readAsDataURL(file)\r\n        reader.onload = function () {\r\n            resole(this.result)\r\n        }\r\n    })\r\n}\r\nexport default fileToBase64\r\n","import bytesFormat from './bytesFormat'\r\nimport base64ToBlob from './base64ToBlob'\r\nimport base64ToFile from './base64ToFile'\r\nimport blobToBase64 from './blobToBase64'\r\nimport blobToFile from './blobToFile'\r\nimport fileToBase64 from './fileToBase64'\r\nimport fileToBlob from './fileToBlob'\r\nimport downloadByBase64 from './downloadByBase64'\r\nimport downloadByImgLink from './downloadByImgLink'\r\nimport downloadByImgSelector from './downloadByImgSelector'\r\n\r\nexport default {\r\n    bytesFormat,\r\n    base64ToBlob,\r\n    base64ToFile,\r\n    blobToBase64,\r\n    blobToFile,\r\n    fileToBase64,\r\n    fileToBlob,\r\n    downloadByBase64,\r\n    downloadByImgLink,\r\n    downloadByImgSelector\r\n}\r\n","/**\r\n * @description: (bytes)字节数自动转换\r\n * @param {Number} bytes: 字节数\r\n */\r\nconst bytesFormat = function (bytes) {\r\n    if (bytes === 0) return '0 B'\r\n    if (!bytes) return ''\r\n    let k = 1024\r\n    let sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n    let i = Math.floor(Math.log(bytes) / Math.log(k))\r\n    let num = bytes / Math.pow(k, i)\r\n    return num.toFixed(2) + ' ' + sizes[i]\r\n}\r\nexport default bytesFormat\r\n","/**\r\n * @description: Base64 to File\r\n * @param dataURL   {String}  base64\r\n * @param fileName   {String}  file name\r\n * @returns {File}\r\n */\r\nconst base64ToFile = function (base64, fileName) {\r\n    let arr = base64.split(','),\r\n        mimeType = arr[0].match(/:(.*?);/)[1], //base64文件类型\r\n        bStr = atob(arr[1]),\r\n        n = bStr.length,\r\n        u8arr = new Uint8Array(n)\r\n    while (n--) {\r\n        u8arr[n] = bStr.charCodeAt(n)\r\n    }\r\n    return new File([u8arr], fileName, { type: mimeType })\r\n}\r\nexport default base64ToFile\r\n","/**\r\n * @description: Blob to Base64\r\n * @param  {Blob} blob\r\n * @return {Promise<dataURL>} Base64\r\n */\r\nconst blobToBase64 = function (blob) {\r\n    return new Promise(resolve => {\r\n        let reader = new FileReader()\r\n        reader.onload = function (e) {\r\n            resolve(e.target.result)\r\n        }\r\n        reader.readAsDataURL(blob)\r\n    })\r\n}\r\nexport default blobToBase64\r\n","/**\r\n * @description: Blob  to  File\r\n * @param  { Blob } blob\r\n * @param { String } filename : file name\r\n * @return { File } File\r\n */\r\nconst blobToFile = function (blob, filename) {\r\n    return new File([blob], filename, { type: blob.type, lastModified: Date.now() })\r\n}\r\nexport default blobToFile\r\n","import fileToBase64 from './fileToBase64'\r\nimport base64ToBlob from './base64ToBlob'\r\n/**\r\n * @description: File to Blob\r\n * @param  { File } file: File object\r\n * @return { Promise }\r\n */\r\nconst fileToBlob = function (file) {\r\n    return fileToBase64(file).then(r => base64ToBlob(r))\r\n}\r\nexport default fileToBlob\r\n","/**\r\n * @description: base64数据导出文件下载\r\n * @param {string} filename - 下载时的文件名\r\n * @param {dataURL} base64 - base64字符串\r\n */\r\nconst downloadByBase64 = function (base64, filename = 'default') {\r\n    let a = document.createElement('a')\r\n    a.style = 'display: none'\r\n    document.body.appendChild(a)\r\n    a.download = filename\r\n    a.href = base64\r\n    if (document.createEvent) {\r\n        let downloadEvt = document.createEvent('MouseEvents')\r\n        downloadEvt.initEvent('click', true, false)\r\n        a.dispatchEvent(downloadEvt)\r\n    } else if (document.createEventObject) {\r\n        a.fireEvent('onclick')\r\n    } else if (typeof a.onclick == 'function') {\r\n        a.onclick()\r\n    }\r\n    document.body.removeChild(a)\r\n}\r\nexport default downloadByBase64\r\n","/**\r\n * 根据 url下载图片\r\n * @param {string} url - 图片url地址\r\n * @return {Promise<dataURL>} :Base64\r\n */\r\nconst downloadByImgLink = function (url, w, h) {\r\n    return new Promise(resolve => {\r\n        let img = new Image()\r\n        img.src = url\r\n        img.crossOrigin = 'anonymous'\r\n        // img.setAttribute('crossOrigin', 'anonymous')\r\n        img.onload = function () {\r\n            //默认按比例压缩\r\n            ;(w = w || this.width), (h = h || this.height)\r\n            let quality = 0.95 // 默认图片质量为0.95\r\n            //生成canvas\r\n            let canvas = document.createElement('canvas')\r\n            let ctx = canvas.getContext('2d')\r\n            // 创建属性节点\r\n            canvas.setAttribute('width', w)\r\n            canvas.setAttribute('height', h)\r\n            ctx.drawImage(this, 0, 0, w, h)\r\n            // quality值越小，所绘制出的图像越模糊\r\n            let base64 = canvas.toDataURL('image/png', quality)\r\n            // 回调函数返回base64的值\r\n            resolve(base64)\r\n        }\r\n    })\r\n}\r\nexport default downloadByImgLink\r\n","/**\r\n * Download Image to local:\r\n * the main principle is to use the download attribute of a tag and todataurl () of canvas\r\n * @param { String | Element } selector: Selector of img tag or img element\r\n * @param { String } name：Download Image Name\r\n */\r\nconst downloadByImgSelector = function (selector, name) {\r\n    let image = new Image()\r\n    // Solving cross domain canvas pollution problem\r\n    image.setAttribute('crossOrigin', 'anonymous')\r\n\r\n    image.onload = function () {\r\n        // 创建一个canvas标签\r\n        let canvas = document.createElement('canvas')\r\n        // 设置canvas的宽高\r\n        canvas.width = image.width\r\n        canvas.height = image.height\r\n        // 获取canvas的2d界面\r\n        let context = canvas.getContext('2d')\r\n        // 把图片画在canvas上\r\n        context.drawImage(image, 0, 0, canvas.width, canvas.height)\r\n        // 把canvas的内容转化为base64格式\r\n        let url = canvas.toDataURL('image/png')\r\n        // 生成一个a元素\r\n        let a = document.createElement('a')\r\n        // 创建一个单击事件\r\n        let event = new MouseEvent('click')\r\n        // 将a的download属性设置为我们想要下载的图片名称，若name不存在则使用‘下载图片名称’作为默认名称\r\n        a.download = name || 'defaultName'\r\n        // 将生成的URL设置为a.href属性\r\n        a.href = url\r\n        // 触发a的单击事件\r\n        a.dispatchEvent(event)\r\n    }\r\n    // 获取img上的src值，赋值之后，完成之后会调用onload事件\r\n    image.src = typeof selector === 'string' ? document.querySelector(selector).src : selector.src\r\n}\r\nexport default downloadByImgSelector\r\n"],"names":["base64ToBlob","base64","mime","split","byte","window","atob","arrayBuffer","ArrayBuffer","length","intArray","Uint8Array","i","len","charCodeAt","Blob","type","fileToBase64","file","Promise","resole","reader","FileReader","readAsDataURL","onload","this","result","bytesFormat","bytes","Math","floor","log","pow","toFixed","base64ToFile","fileName","arr","mimeType","match","bStr","n","u8arr","File","blobToBase64","blob","resolve","e","target","blobToFile","filename","lastModified","Date","now","fileToBlob","then","downloadByBase64","a","document","createElement","style","body","appendChild","download","href","createEvent","downloadEvt","initEvent","dispatchEvent","createEventObject","fireEvent","onclick","removeChild","downloadByImgLink","url","w","h","img","Image","src","crossOrigin","width","height","canvas","ctx","getContext","setAttribute","drawImage","toDataURL","downloadByImgSelector","selector","name","image","event","MouseEvent","querySelector"],"mappings":"0LAKqB,SAAfA,EAAyBC,WACvBC,EAAOD,EAAOE,MAAM,KAAK,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GACrDC,EAAOC,OAAOC,KAAKL,EAAOE,MAAM,KAAK,IACrCI,EAAc,IAAIC,YAAYJ,EAAKK,QACnCC,EAAW,IAAIC,WAAWJ,GACrBK,EAAI,EAAGC,EAAMT,EAAKK,OAAQG,EAAIC,EAAKD,IACxCF,EAASE,GAAKR,EAAKU,WAAWF,UAE3B,IAAIG,KAAK,CAACL,GAAW,CAAEM,KAAMd,ICRnB,SAAfe,EAAyBC,UACpB,IAAIC,QAAQ,SAAAC,OACXC,EAAS,IAAIC,WACjBD,EAAOE,cAAcL,GACrBG,EAAOG,OAAS,WACZJ,EAAOK,KAAKC,iBCCT,CACXC,YCRgB,SAAUC,MACZ,IAAVA,EAAa,MAAO,UACnBA,EAAO,MAAO,OAGfhB,EAAIiB,KAAKC,MAAMD,KAAKE,IAAIH,GAASC,KAAKE,IAFlC,cAGEH,EAAQC,KAAKG,IAHf,KAGsBpB,IACnBqB,QAAQ,GAAK,IAHZ,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAGxBrB,IDEpCZ,aAAAA,EACAkC,aERiB,SAAUjC,EAAQkC,WAC/BC,EAAMnC,EAAOE,MAAM,KACnBkC,EAAWD,EAAI,GAAGE,MAAM,WAAW,GACnCC,EAAOjC,KAAK8B,EAAI,IAChBI,EAAID,EAAK9B,OACTgC,EAAQ,IAAI9B,WAAW6B,GACpBA,KACHC,EAAMD,GAAKD,EAAKzB,WAAW0B,UAExB,IAAIE,KAAK,CAACD,GAAQN,EAAU,CAAEnB,KAAMqB,KFA3CM,aGViB,SAAUC,UACpB,IAAIzB,QAAQ,SAAA0B,OACXxB,EAAS,IAAIC,WACjBD,EAAOG,OAAS,SAAUsB,GACtBD,EAAQC,EAAEC,OAAOrB,SAErBL,EAAOE,cAAcqB,MHKzBI,WIVe,SAAUJ,EAAMK,UACxB,IAAIP,KAAK,CAACE,GAAOK,EAAU,CAAEjC,KAAM4B,EAAK5B,KAAMkC,aAAcC,KAAKC,SJUxEnC,aAAAA,EACAoC,WKXe,SAAUnC,UAClBD,EAAaC,GAAMoC,KAAUtD,ILWpCuD,iBMdqB,SAAUtD,EAAV,OAAkBgD,+BAAlB,EAAA,EAA6B,UAC9CO,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,MAAQ,gBACVF,SAASG,KAAKC,YAAYL,GAC1BA,EAAEM,SAAWb,EACbO,EAAEO,KAAO9D,EACLwD,SAASO,cACLC,EAAcR,SAASO,YAAY,gBAC3BE,UAAU,SAAS,GAAM,GACrCV,EAAEW,cAAcF,IACTR,SAASW,kBAChBZ,EAAEa,UAAU,WACe,mBAAbb,EAAEc,SAChBd,EAAEc,UAENb,SAASG,KAAKW,YAAYf,INA1BgB,kBOfsB,SAAUC,EAAKC,EAAGC,UACjC,IAAIxD,QAAQ,SAAA0B,OACX+B,EAAM,IAAIC,MACdD,EAAIE,IAAML,EACVG,EAAIG,YAAc,YAElBH,EAAIpD,OAAS,WAEPkD,EAAIA,GAAKjD,KAAKuD,MAASL,EAAIA,GAAKlD,KAAKwD,WAGnCC,EAASzB,SAASC,cAAc,UAChCyB,EAAMD,EAAOE,WAAW,MAE5BF,EAAOG,aAAa,QAASX,GAC7BQ,EAAOG,aAAa,SAAUV,GAC9BQ,EAAIG,UAAU7D,KAAM,EAAG,EAAGiD,EAAGC,GAEzB1E,EAASiF,EAAOK,UAAU,YAThB,KAWd1C,EAAQ5C,OPJhBuF,sBQf0B,SAAUC,EAAUC,OAC1CC,EAAQ,IAAId,MAEhBc,EAAMN,aAAa,cAAe,aAElCM,EAAMnE,OAAS,eAEP0D,EAASzB,SAASC,cAAc,UAEpCwB,EAAOF,MAAQW,EAAMX,MACrBE,EAAOD,OAASU,EAAMV,OAERC,EAAOE,WAAW,MAExBE,UAAUK,EAAO,EAAG,EAAGT,EAAOF,MAAOE,EAAOD,YAEhDR,EAAMS,EAAOK,UAAU,aAEvB/B,EAAIC,SAASC,cAAc,KAE3BkC,EAAQ,IAAIC,WAAW,SAE3BrC,EAAEM,SAAW4B,GAAQ,cAErBlC,EAAEO,KAAOU,EAETjB,EAAEW,cAAcyB,IAGpBD,EAAMb,KAA0B,iBAAbW,EAAwBhC,SAASqC,cAAcL,GAAgBA,GAANX"}