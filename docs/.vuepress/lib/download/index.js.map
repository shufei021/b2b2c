{"version":3,"file":"index.js","sources":["../../../src/lib/download/lib/core.js","../../../src/lib/download/index.js"],"sourcesContent":["/*\r\n * @Description:\r\n * @Author: shufei\r\n * @Date: 2020-11-12 20:02:37\r\n * @LastEditTime: 2020-11-23 10:08:03\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * 根据url下载图片\r\n * @param {string} url - 图片url地址\r\n *\r\n */\r\nexport const downloadImg = function (url) {\r\n    return new Promise(resolve => {\r\n        let img = new Image()\r\n        img.src = url\r\n        img.crossOrigin = ''\r\n        img.onload = function () {\r\n            //默认按比例压缩\r\n            let w = this.width,\r\n                h = this.height\r\n            let quality = 0.95 // 默认图片质量为0.7\r\n            //生成canvas\r\n            let canvas = document.createElement('canvas')\r\n            let ctx = canvas.getContext('2d')\r\n            // 创建属性节点\r\n            canvas.setAttribute('width', w)\r\n            canvas.setAttribute('height', h)\r\n            ctx.drawImage(this, 0, 0, w, h)\r\n            // quality值越小，所绘制出的图像越模糊\r\n            let base64 = canvas.toDataURL('image/png', quality)\r\n            // 回调函数返回base64的值\r\n            resolve(base64)\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * base64数据导出文件下载\r\n * @param {string} filename - 下载时的文件名\r\n * @param {string} data - base64字符串\r\n */\r\nexport const downloadFile = function (filename, data) {\r\n    let downloadLink = document.createElement('a')\r\n    if (downloadLink) {\r\n        document.body.appendChild(downloadLink)\r\n        downloadLink.style = 'display: none'\r\n        downloadLink.download = filename\r\n        downloadLink.href = data\r\n        if (document.createEvent) {\r\n            let downloadEvt = document.createEvent('MouseEvents')\r\n            downloadEvt.initEvent('click', true, false)\r\n            downloadLink.dispatchEvent(downloadEvt)\r\n        } else if (document.createEventObject) {\r\n            downloadLink.fireEvent('onclick')\r\n        } else if (typeof downloadLink.onclick == 'function') {\r\n            downloadLink.onclick()\r\n        }\r\n        document.body.removeChild(downloadLink)\r\n    }\r\n}\r\n\r\n/**\r\n * 文件转 base64\r\n * @param {string} filename - 下载时的文件名\r\n * @param {string} data - base64字符串\r\n */\r\nexport const fileToBase64 = function (file) {\r\n    return new Promise(resolve => {\r\n        let windowURL = window.URL || window.webkitURL\r\n        //要显示图片的路径\r\n        let dataURL = windowURL.createObjectURL(file)\r\n        //图片转换成base64\r\n        let reader = new FileReader()\r\n        reader.readAsDataURL(file) //这一步是关键\r\n        reader.onload = function (e) {\r\n            let base64 = e.target.result\r\n            resolve({ base64, dataURL, type: base64.slice(base64.indexOf('/') + 1, base64.indexOf(';')) })\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * @description: 通过https的图片地址下载到本地\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const downloadByUrl = function (url, name = '图片名称') {\r\n    downloadImg(url).then(res => {\r\n        downloadFile(name, res)\r\n    })\r\n}\r\n\r\n/**\r\n * 下载图片到本地：主要原理，利用a标签的download属性以及canvas的toDataURL()\r\n * @param { String } selector: 图片的选择器\r\n * @param { String } name：被下载图片的命名\r\n */\r\nexport const downloadPicture = function (selector, name) {\r\n    let image = new Image()\r\n    // 解决跨域 Canvas 污染问题\r\n    image.setAttribute('crossOrigin', 'anonymous')\r\n    image.onload = function () {\r\n        // 创建一个canvas标签\r\n        let canvas = document.createElement('canvas')\r\n        // 设置canvas的宽高\r\n        canvas.width = image.width\r\n        canvas.height = image.height\r\n        // 获取canvas的2d界面\r\n        let context = canvas.getContext('2d')\r\n        // 把图片画在canvas上\r\n        context.drawImage(image, 0, 0, canvas.width, canvas.height)\r\n        // 把canvas的内容转化为base64格式\r\n        let url = canvas.toDataURL('image/png')\r\n        // 生成一个a元素\r\n        let a = document.createElement('a')\r\n        // 创建一个单击事件\r\n        let event = new MouseEvent('click')\r\n\r\n        // 将a的download属性设置为我们想要下载的图片名称，若name不存在则使用‘下载图片名称’作为默认名称\r\n        a.download = name || '下载图片名称'\r\n        // 将生成的URL设置为a.href属性\r\n        a.href = url\r\n        // 触发a的单击事件\r\n        a.dispatchEvent(event)\r\n    }\r\n    // 获取img上的src值，赋值之后，完成之后会调用onload事件\r\n    image.src = typeof selector === 'string' ? document.querySelector(selector).src : selector.src\r\n}\r\n\r\n/**\r\n *下载二进制流文件\r\n * @param {*} ：参数对象\r\n */\r\n\r\nexport const downBolbFile = function ({ httpType = 'GET', url, isCust = false, fileName = '相关文档.png' }) {\r\n    return new Promise((resolve, reject) => {\r\n        let decUserInfo = function () {\r\n            return {\r\n                userInfo: {},\r\n                token: ''\r\n            }\r\n        }\r\n        const userObj = decUserInfo()\r\n        const http = new XMLHttpRequest()\r\n        let name = ''\r\n        http.open(httpType, url)\r\n        http.setRequestHeader('token', userObj.token)\r\n        http.setRequestHeader('Content-Type', 'application/json')\r\n        http.responseType = 'blob'\r\n        http.onreadystatechange = () => {\r\n            if (http.readyState === 4 && http.status === 200) {\r\n                // 先创建读取文件的对象\r\n                const reader = new FileReader()\r\n                // 读取流中的内容\r\n                reader.readAsText(http.response)\r\n                reader.onload = () => {\r\n                    try {\r\n                        const text = reader.result\r\n                        reject(JSON.parse(text))\r\n                    } catch (error) {\r\n                        if (isCust) {\r\n                            const filename = http.getResponseHeader('Content-Disposition').split(';')[1].split('=')[1]\r\n                            name = filename\r\n                        } else {\r\n                            name = fileName\r\n                        }\r\n                        const blob = new Blob([http.response])\r\n                        const csvUrl = URL.createObjectURL(blob)\r\n                        const link = document.createElement('a')\r\n                        document.body.appendChild(link) // 创建的标签添加到body，解决Firefox下无法打开页面的问题\r\n                        link.href = csvUrl\r\n                        link.target = '_blank'\r\n                        link.id = 'linkId'\r\n                        link.className = 'linkId'\r\n                        link.download = decodeURI(name)\r\n                        document.getElementById('linkId').click()\r\n                        link.remove() // 将a标签移除\r\n                        resolve()\r\n                    }\r\n                }\r\n            }\r\n            if (http.readyState === 4 && http.status !== 200) {\r\n                reject(JSON.parse(http.response))\r\n            }\r\n        }\r\n        http.send(null)\r\n    })\r\n}\r\n","/*\r\n * @Description: 下载类 Download\r\n * @Author: shufei\r\n * @Date: 2020-11-12 20:02:31\r\n * @LastEditTime: 2020-12-04 09:29:18\r\n * @LastEditors: shufei\r\n */\r\nimport * as download from './lib/core'\r\n\r\nfunction Download() {\r\n    if (!(this instanceof Download)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nDownload.prototype = download\r\nexport default new Download()\r\n"],"names":["downloadImg","url","Promise","resolve","img","Image","src","crossOrigin","onload","w","this","width","h","height","canvas","document","createElement","ctx","getContext","setAttribute","drawImage","base64","toDataURL","downloadFile","filename","data","downloadLink","body","appendChild","style","download","href","createEvent","downloadEvt","initEvent","dispatchEvent","createEventObject","fireEvent","onclick","removeChild","Download","TypeError","prototype","file","dataURL","window","URL","webkitURL","createObjectURL","reader","FileReader","readAsDataURL","e","target","result","type","slice","indexOf","name","then","res","selector","image","a","event","MouseEvent","querySelector","httpType","isCust","fileName","reject","userObj","userInfo","token","http","XMLHttpRequest","open","setRequestHeader","responseType","onreadystatechange","readyState","status","readAsText","response","text","JSON","parse","error","getResponseHeader","split","blob","Blob","csvUrl","link","id","className","decodeURI","getElementById","click","remove","send"],"mappings":"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"}