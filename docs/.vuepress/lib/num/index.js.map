{"version":3,"file":"index.js","sources":["../../../src/lib/num/lib/core.js","../../../src/lib/num/index.js"],"sourcesContent":["/**\r\n * 四舍五入到指定位数\r\n * @param {Number} n:小数\r\n * @param {Number} decimals ：四舍五入到指定位数\r\n */\r\nexport const round = function (n, decimals) {\r\n    if (decimals === undefined) return n\r\n    return Number(Math.round(n + 'e' + (decimals || 0)) + 'e-' + (decimals || 0))\r\n}\r\n/**\r\n * 计算方法 calc\r\n * @param { number } type ：0 加  1 减 2 乘 3 除\r\n * @param { String | Number } a ：计算数a\r\n * @param { String | Number } b ：计算数b\r\n * @param { Number } digit  ：结果保留的位数\r\n * @return Number | String\r\n */\r\nconst calc = function (type, a, b, digit) {\r\n    let r1, r2\r\n    try {\r\n        r1 = a.toString().split('.')[1].length\r\n    } catch (e) {\r\n        r1 = 0\r\n    }\r\n    try {\r\n        r2 = b.toString().split('.')[1].length\r\n    } catch (e) {\r\n        r2 = 0\r\n    }\r\n    let maxLen = Math.pow(10, Math.max(r1, r2))\r\n    let tyeps = [\r\n        round((Math.round(maxLen * a) + Math.round(maxLen * b)) / maxLen, digit), //加\r\n        round((Math.round(maxLen * a) - Math.round(maxLen * b)) / maxLen, digit), //减\r\n        round((Math.round(maxLen * a) * Math.round(maxLen * b)) / (maxLen * maxLen), digit), //乘\r\n        round(Math.round(maxLen * a) / Math.round(maxLen * b), digit) //除\r\n    ]\r\n    let str = String(round(tyeps[type], digit || 0))\r\n    if (digit) {\r\n        if (str.includes('.')) return str.split('.')[0] + '.' + str.split('.')[1].padEnd(digit, 0)\r\n        return (str + '.').padEnd((str + '.').length + digit, 0)\r\n    } else {\r\n        return tyeps[type]\r\n    }\r\n}\r\n\r\n/**\r\n * 两数相加\r\n * @param {*} a :加数\r\n * @param {*} b ：被加数\r\n * @param {*} digit ：结果保留位数\r\n */\r\nexport const plus = function (a, b, digit) {\r\n    return calc(0, a, b, digit)\r\n}\r\n\r\n/**\r\n * 多数相加\r\n * @param {Number | String} arr:需要累乘的数的数组\r\n * @param {Number} len ：结果保留位数\r\n */\r\nexport const plusMore = function (arr = [], len) {\r\n    if (!arr.length) return 0\r\n    if (arr.length == 1) return plus(arr[0], 0, len)\r\n    //参数传一个 直接返回合并后的对象\r\n    if (arr.length == 2) return plus(arr[0], arr[1], len)\r\n    //参数大于2，则执行递归合并，并在长度为2时，返回合并对象\r\n    while (arr.length > 2) {\r\n        arr.splice(0, 2, plus(arr[0], arr[1]))\r\n        if (arr.length == 2) return plus(arr[0], arr[1], len)\r\n    }\r\n}\r\n\r\n/**\r\n * 两数相减\r\n * @param {*} a :减数\r\n * @param {*} b ：被减数\r\n * @param {*} digit ：结果保留位数\r\n */\r\nexport const minus = function (a, b, digit) {\r\n    return calc(1, a, b, digit)\r\n}\r\n\r\n/**\r\n * 多数相减\r\n * @param {Number | String} arr:需要累减的数的数组\r\n * @param {Number} len ：结果保留位数\r\n */\r\nexport const minusMore = function (arr = [], len) {\r\n    if (!arr.length) return 0\r\n    if (arr.length == 1) return minus(arr[0], 0, len)\r\n    //参数传一个 直接返回合并后的对象\r\n    if (arr.length == 2) return minus(arr[0], arr[1], len)\r\n    //参数大于2，则执行递归合并，并在长度为2时，返回合并对象\r\n    while (arr.length > 2) {\r\n        arr.splice(0, 2, minus(arr[0], arr[1]))\r\n        if (arr.length == 2) return minus(arr[0], arr[1], len)\r\n    }\r\n}\r\n\r\n/**\r\n * 两数相乘\r\n * @param {*} a :乘数\r\n * @param {*} b ：被乘数\r\n * @param {*} digit ：结果保留位数\r\n */\r\nexport const multiply = function (a, b, digit) {\r\n    return calc(2, a, b, digit)\r\n}\r\n\r\n/**\r\n * 多数相乘\r\n * @param {Number | String} arr:需要累乘的数的数组\r\n * @param {Number} len ：结果保留位数\r\n */\r\nexport const multiplyMore = function (arr = [], len) {\r\n    if (!arr.length) return 0\r\n    if (arr.length == 1) return multiply(arr[0], 1, len)\r\n    //参数传一个 直接返回合并后的对象\r\n    if (arr.length == 2) return multiply(arr[0], arr[1], len)\r\n    //参数大于2，则执行递归合并，并在长度为2时，返回合并对象\r\n    while (arr.length > 2) {\r\n        arr.splice(0, 2, multiply(arr[0], arr[1]))\r\n        if (arr.length == 2) return multiply(arr[0], arr[1], len)\r\n    }\r\n}\r\n\r\n/**\r\n * 两数相除\r\n * @param {*} a :除数\r\n * @param {*} b ：被除数\r\n * @param {*} digit ：结果保留位数\r\n */\r\nexport const devide = function (a, b, digit) {\r\n    return calc(3, a, b, digit)\r\n}\r\n/**\r\n * 多数相除\r\n * @param {Number | String} arr:需要累减的数的数组\r\n * @param {Number} len ：结果保留位数\r\n */\r\nexport const devideMore = function (arr = [], len) {\r\n    if (!arr.length) return 0\r\n    if (arr.length == 1) return devide(arr[0], 0, len)\r\n    //参数传一个 直接返回合并后的对象\r\n    if (arr.length == 2) return devide(arr[0], arr[1], len)\r\n    //参数大于2，则执行递归合并，并在长度为2时，返回合并对象\r\n    while (arr.length > 2) {\r\n        arr.splice(0, 2, devide(arr[0], arr[1]))\r\n        if (arr.length == 2) return devide(arr[0], arr[1], len)\r\n    }\r\n}\r\n\r\n/**\r\n * 判断是否是有效数字 不包含NaN\r\n * 是否有效数字：排除 NaN Infinity，数字字符串 或是 数字，都为有效数字\r\n * @param { String | Number } n ：\r\n */\r\nexport const isNum = function (n) {\r\n    return typeof n == 'symbol' ? false : !isNaN(parseFloat(n)) && isFinite(n)\r\n}\r\n\r\n/**\r\n * 数组纵向统计和\r\n * @param {Array}} arr\r\n */\r\nexport const longitudinalStatistics = function (arr) {\r\n    let r = new Array(arr[0].length).toString().split(',').fill(0)\r\n    for (let i = 0; i < arr.length; i++) {\r\n        for (let j = 0; j < arr[i].length; j++) {\r\n            resArr[j] += arr[i][j]\r\n        }\r\n    }\r\n    return resArr\r\n}\r\n\r\n/**\r\n * 横向计算数组的和\r\n * @param  {...any} arr\r\n */\r\nexport const horizontalStatistics = function (...arr) {\r\n    return [...arr].reduce((acc, val) => acc + val, 0)\r\n}\r\n\r\n/**\r\n * 数字超出99 变99+\r\n * @param {Number} n:\r\n * @param {Boolean} isShow ：为0是否显示0\r\n */\r\nexport const previeNum = function (n, isShow) {\r\n    return n === undefined ? '' : n == 0 ? (isShow ? '0' : '') : n > 99 ? '99+' : n\r\n}\r\n/**\r\n * 数字处理函数\r\n * @param { String | Number } val : 有效数数字，（字符串类型可以包含前缀，'￥11'、'¥11'）\r\n * @param { Number } len : 小数部分四舍五入保留到的位数\r\n * @param { Boolean } isThousands : 整数部分是否进行千分位,默认值 false\r\n * @param { Boolean } isClearPrefix ：是否清除前缀，默认不传则是 auto 模式（自适应，有就渲染，没有就不渲染）,默认值 false\r\n * @param { Boolean } iscalc ：是否在计算结果后进行去除补位处理,默认值 false\r\n */\r\nexport const fmtAmt = function (val, len, isThousands = false, isClearPrefix = false, iscalc = false) {\r\n    // 无效值处理，，不符合传入规则的值一律返回空字符串\r\n    if (val === undefined || val == null) return ''\r\n    // 无论数字还是字符串数字，最终都转换成字符串数字\r\n    var str = val + ''\r\n    // 默认前缀 大写的人民币符合\r\n    var prefix = ''\r\n    // 如果传入的金额字符串中包含了 人民币或美元符合，则进行分离处理\r\n    if (str.indexOf('￥') > -1 || str.indexOf('¥') > -1) {\r\n        prefix = '￥'\r\n        str = str.substr(1)\r\n    }\r\n    // 进行检测str是否是有效的数字,不是有效直接返回空字符串\r\n    if (!isNum(str)) return ''\r\n    // 是否清除前缀，默认不传的话 则是auto，自适应：自身有就有，没有则没有，如果清除前缀， 则统一没有前缀，管你有无\r\n    if (isClearPrefix) prefix = ''\r\n    // 是否是小数\r\n    var isInt = str.indexOf('.') === -1\r\n    len = len === undefined ? (isInt ? 0 : str.split('.')[1].length) : len\r\n    // 整数部分\r\n    var int = len == 0 ? Math.round(str) + '' : isInt ? str.split('.')[0] : (round(str * 1 + '', len) + '').split('.')[0]\r\n    // str 四舍五入到指定位数\r\n    str = round(str * 1 + '', len) + ''\r\n    // 小数部分\r\n    var dot = len == 0 || isInt ? '' : str.split('.')[1]\r\n    dot = (dot ? dot : '').padEnd(len, 0)\r\n    let ret = (isThousands ? int.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',') : int) + (dot.length ? '.' + dot : '')\r\n    ret = iscalc ? Number(ret) : ret\r\n    return prefix + ret\r\n}\r\n\r\n/**\r\n * @description: 过滤金额\r\n * @param :\r\n * @return {*}\r\n * @param {*} value 金额\r\n * @param {*} num 保留几位小数（不必传）\r\n */\r\nexport const filterMoney = function (cb) {\r\n    let { value, num } = cb()\r\n    value = value + '' || ''\r\n    num = num === undefined ? 2 : num\r\n    //后期会换成调用接口返回的数值\r\n    return value.replace(/-/g, '').slice(0, value.indexOf('.') + 1 + num)\r\n}\r\n\r\n/**\r\n * @description: 对象求和\r\n * { a:{preice:1,unit:2},b:{preice:3,unit:4}} = > sum(obj,['price','unit'])=> {price:4,unit:6}\r\n * { a:{preice:1,unit:2},b:{preice:3,unit:4}} = > sum(obj,'price')=> {price:4}\r\n * @param {Object} :obj\r\n * @param {String | Array} :key\r\n * @return {*}\r\n */\r\nexport const sum = function (obj, key) {\r\n    let ret = {}\r\n    if (typeof key === 'string') {\r\n        ret[key] = 0\r\n    } else if (Array.isArray(key)) {\r\n        ret = key.reduce((p, c) => {\r\n            p[c] = 0\r\n            return p\r\n        }, {})\r\n    }\r\n    let values = Object.values(obj)\r\n    for (let i = 0; i < values.length; i++) {\r\n        for (let k in ret) {\r\n            if (k in values[i]) {\r\n                ret[k] = plus(ret[k], Number(values[i][k]) || 0)\r\n            }\r\n        }\r\n    }\r\n    return ret\r\n}\r\n/**\r\n * @description: json数组 求和\r\n * @param {Array} :arr\r\n * @param {String | Array} :key\r\n * @return {*}\r\n */\r\nexport const arrSum = function (arr, keys, len) {\r\n    let clone = JSON.parse(JSON.stringify(arr))\r\n    let totalInfo = {}\r\n    let total = plusMore(\r\n        clone.map(item => {\r\n            return keys.reduce((p1, c1) => {\r\n                if (totalInfo[c1]) {\r\n                    totalInfo[c1] = plus(totalInfo[c1], Number(item[c1]) || 0)\r\n                } else {\r\n                    totalInfo[c1] = Number(item[c1]) || 0\r\n                }\r\n                p1 = multiply(p1, item[c1] || 0)\r\n                return p1\r\n            }, 1)\r\n        }),\r\n        len\r\n    )\r\n\r\n    return {\r\n        totalInfo,\r\n        total\r\n    }\r\n}\r\n/**\r\n * @description: 类似商品对象合计\r\n * @param {Object}:obj //\r\n * @return {object}:opt= {keys:[k1,k2],len:undefined,type:3}  // 1 加 2 减 3乘  4除\r\n */\r\n\r\nexport const objSum = function (obj, opt = {}) {\r\n    obj = JSON.parse(JSON.stringify(obj))\r\n    let res = sum(obj, opt.keys)\r\n    let result = Object.values(obj).reduce((p, c) => {\r\n        let arr = opt.keys.map(i => {\r\n            if (!opt.zero) {\r\n                if (c[i] == 0) c[i] = 1\r\n            }\r\n            return c[i]\r\n        })\r\n        let pre =\r\n            opt.type == 3\r\n                ? multiplyMore(arr, opt.len)\r\n                : opt.type == 1\r\n                ? plusMore(arr, opt.len)\r\n                : opt.type == 2\r\n                ? minusMore(arr, opt.len)\r\n                : opt.type == 4\r\n                ? devideMore(arr, opt.len)\r\n                : multiplyMore(arr, opt.len)\r\n\r\n        p = plus(p, pre)\r\n        return p\r\n    }, 0)\r\n    return {\r\n        total: fmtAmt(result, opt.len),\r\n        ...res\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 过滤统计根据 key 包含  {'111|2222|333'：{},'1311|1112|333'：{}}\r\n * @param {Object}:\r\n * @return {object}:\r\n */\r\n\r\nexport const filterSum = function (obj, str, totalKeys) {\r\n    let ret = {}\r\n    if (typeof totalKeys === 'string') {\r\n        ret[totalKeys] = 0\r\n    } else if (Array.isArray(totalKeys)) {\r\n        ret = totalKeys.reduce((p, c) => {\r\n            p[c] = 0\r\n            return p\r\n        }, {})\r\n    }\r\n    for (let k in obj) {\r\n        if (new RegExp('^' + str, 'g').test(k)) {\r\n            for (let j in ret) {\r\n                ret[j] = plus(ret[j], obj[k][j])\r\n            }\r\n        }\r\n    }\r\n    return ret\r\n}\r\n/**\r\n * @description: 百分比 1%   转数字 0.01   <=> 数字 0.01 转百分比 1%\r\n * @param  {String | Number}: str 需要互转的值\r\n * @return {*}\r\n */\r\nexport const percentNum = function (str = '') {\r\n    str += ''\r\n    if (!str.trim().length) return ''\r\n    if (isNum(str)) {\r\n        return multiply(str, 100) + '%'\r\n    } else if (typeof str === 'string' && str.includes('%') && isNum(str.slice(0, -1))) {\r\n        return devide(str.slice(0, -1), 100)\r\n    } else {\r\n        return ''\r\n    }\r\n}\r\n","/*\r\n * @Description:\r\n * @Author: shufei\r\n * @Date: 2020-08-24 08:26:55\r\n * @LastEditTime: 2020-12-04 09:53:25\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * Rnum\r\n * 数字类\r\n * 使用工厂模式：接收值返回处理后的值\r\n */\r\nimport * as num from './lib/core'\r\nfunction Rnum() {\r\n    if (!(this instanceof Rnum)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nRnum.prototype = num\r\nexport default new Rnum()\r\n"],"names":["round","n","decimals","undefined","Number","Math","calc","type","a","b","digit","r1","r2","toString","split","length","e","maxLen","pow","max","tyeps","str","String","includes","padEnd","plus","plusMore","arr","len","splice","minus","minusMore","multiply","multiplyMore","devide","devideMore","isNum","_typeof","isNaN","parseFloat","isFinite","fmtAmt","val","isThousands","isClearPrefix","iscalc","prefix","indexOf","substr","isInt","int","dot","ret","replace","sum","obj","key","Array","isArray","reduce","p","c","values","Object","i","k","Rnum","this","TypeError","prototype","fill","j","resArr","acc","isShow","cb","value","num","slice","keys","clone","JSON","parse","stringify","totalInfo","total","map","item","p1","c1","opt","res","result","zero","pre","totalKeys","RegExp","test","trim"],"mappings":"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"}