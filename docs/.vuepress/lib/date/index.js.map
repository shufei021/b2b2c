{"version":3,"file":"index.js","sources":["../../../src/lib/date/lib/helper.js","../../../src/lib/date/lib/verify.js","../../../src/lib/date/lib/date.js","../../../src/lib/date/lib/core.js","../../../src/lib/date/lib/stamp.js","../../../src/lib/date/index.js"],"sourcesContent":["/**\r\n * ※\r\n * Rdate 的静态方法\r\n * 用于 根据参数获取时间 的兼容：输入日期\r\n * 第1种情况：用户没有传参数，即 dt === undefined，此时返回当前日期时间\r\n * 第2种情况：用户传参数不符合规定（标准的时间戳和日期），此时返回当前日期时间\r\n * 第3种情况：用户传参数符合规定（标准的时间戳和日期），此时返回给定日期\r\n */\r\nexport const _dt = function (dt) {\r\n    return dt ? new Date(typeof dt == 'string' && dt.indexOf('-') > -1 ? dt.replace(/-/g, '/') : dt) : new Date()\r\n}\r\n\r\n/**\r\n * ※\r\n * Rdate 的静态方法\r\n * 初始化 dt 和 format\r\n * @param { Array } args ：参数解构后的数组\r\n * @param { String } ft  ：格式\r\n */\r\nexport const _initFormat = function (args, ft) {\r\n    let [a, b] = args,\r\n        dt = new Date(),\r\n        format = ft\r\n    if (args.length == 1) {\r\n        // 参数长度为1个时，检测传入的值的两种情况，不是格式就是时间，传入参数请按规则\r\n        isNaN(new Date(a).valueOf()) ? (format = a) : (dt = new Date(typeof a == 'string' ? a.replace(/-/g, '/') : a))\r\n    } else if (args.length >= 2) {\r\n        // 参数长度为2个时，正常对应\r\n        dt = new Date(typeof a == 'string' ? a.replace(/-/g, '/') : a)\r\n        format = b\r\n    }\r\n    return { dt, format }\r\n}\r\n\r\n/**\r\n * ※\r\n * Rdate 的静态方法\r\n * 用于获取时间详情\r\n * @param {String | Number | Date} dt ：日期 或 时间戳 或 日期对象\r\n */\r\nexport const _details = function (dt = new Date()) {\r\n    let d = _dt(dt)\r\n    return {\r\n        year: d.getFullYear(),\r\n        month: d.getMonth() + 1,\r\n        date: d.getDate(),\r\n        hour: d.getHours(),\r\n        minute: d.getMinutes(),\r\n        second: d.getSeconds(),\r\n        millisecond: d.getMilliseconds()\r\n    }\r\n}\r\n\r\nexport const padStart = (string, length, pad) => {\r\n    const s = String(string)\r\n    if (!s || s.length >= length) return String(string)\r\n    return `${Array(length + 1 - s.length).join(pad)}${string}`\r\n}\r\n","/**\r\n *\r\n * ***********\r\n * * 验证api *\r\n * ***********\r\n */\r\n\r\n/**\r\n * 是否润年\r\n * 能被4整除而不能被100整除.(如2004年就是闰年,1900年不是)\r\n * @param { Number | String } : 4位数年份，必需\r\n * @return 布尔值\r\n */\r\nexport const isLeapYear = function (y) {\r\n    return (y % 4 === 0 && y % 100 !== 0) || y % 400 === 0\r\n}\r\n\r\n/**\r\n * 判断时间（时分秒）格式是否有效\r\n * @param { String } str ：时分秒，必需\r\n * @return 布尔值\r\n */\r\nexport const isTime = function (str) {\r\n    let ret = str.match(/^(\\d{1,2})(:)?(\\d{1,2})\\2(\\d{1,2})$/)\r\n    if (ret == null) return false\r\n    if (ret[1] >= 24 || ret[3] >= 60 || ret[4] >= 60) return false\r\n    return true\r\n}\r\n\r\n/**\r\n * 判断日期（年月日）格式是否有效\r\n * @param {String} str ：年月日，必需\r\n * @return 布尔值\r\n */\r\nexport const isDate = function (str) {\r\n    let ret = str.match(/^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2})$/)\r\n    if (ret == null) return false\r\n    let d = new Date(ret[1], ret[3] - 1, ret[4])\r\n    return d.getFullYear() == ret[1] && d.getMonth() + 1 == ret[3] && d.getDate() == ret[4]\r\n}\r\n\r\n/**\r\n * 判断 完整的年月日时分秒格式是否有效\r\n * @param { String } str ：年月日时分秒，必需\r\n * @return 布尔值\r\n */\r\nexport const isDateTime = function (str) {\r\n    let ret = str.match(/^(\\d{4})(-|\\/)(\\d{1,2})\\2(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/)\r\n    if (ret == null) return false\r\n    let d = new Date(ret[1], ret[3] - 1, ret[4], ret[5], ret[6], ret[7])\r\n    return d.getFullYear() == ret[1] && d.getMonth() + 1 == ret[3] && d.getDate() == ret[4] && d.getHours() == ret[5] && d.getMinutes() == ret[6] && d.getSeconds() == ret[7]\r\n}\r\n\r\n/**\r\n * 验证一个日期是不是今天\r\n * @param { String } dt： 日期，必需\r\n * @return 布尔值\r\n */\r\nexport const isToday = function (dt) {\r\n    return new Date().toLocaleDateString() == new Date(typeof dt == 'string' ? dt.replace(/-/g, '/') : dt).toLocaleDateString()\r\n}\r\n\r\n/**\r\n * 验证传入的日期是否是昨天\r\n * @param {String} dt： 日期，必需\r\n */\r\nexport const isYesterday = function (dt) {\r\n    let d = new Date()\r\n    d.setDate(d.getDate() - 1)\r\n    return d.toLocaleDateString() === new Date(dt).toLocaleDateString()\r\n}\r\n\r\n/**\r\n * 验证传入的日期年份是否是今年\r\n * @param {String} dt： 日期，必需\r\n */\r\nexport const isThisYear = function (dt) {\r\n    let thisYear = new Date().getFullYear()\r\n    if (!(isDate(dt) || isDateTime(dt))) return false\r\n    let dtYear = new Date(dt).getFullYear()\r\n    return thisYear === dtYear\r\n}\r\n","/**\r\n * 基本方法\r\n * 直接获取当前时间的各个信息 或 获取指定时间的各个信息\r\n * 查看当前时间 或 指定时间的：年月日时分秒 周 星期 季度\r\n * @param {String | Number | Date} dt ：日期 或 时间戳 或 日期对象\r\n */\r\n\r\nimport { _dt, _details, _initFormat, padStart } from './helper'\r\n\r\nimport { format } from './core'\r\n\r\nimport { isYesterday, isToday, isThisYear } from './verify'\r\n\r\nexport const year = function (dt) {\r\n    return _details(dt).year\r\n}\r\nexport const month = function (dt) {\r\n    return _details(dt).month\r\n}\r\nexport const date = function (dt) {\r\n    return _details(dt).date\r\n}\r\nexport const hour = function (dt) {\r\n    return _details(dt).hour\r\n}\r\nexport const minute = function (dt) {\r\n    return _details(dt).minute\r\n}\r\nexport const second = function (dt) {\r\n    return _details(dt).second\r\n}\r\nexport const millisecond = function (dt) {\r\n    return _details(dt).millisecond\r\n}\r\n\r\n/**\r\n * 获取 （给定日期 | 当前日期） 对应的季度\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const quarter = function (dt) {\r\n    let d = _dt(dt)\r\n    let m = d.getMonth()\r\n    return m < 3 ? 1 : m < 6 ? 2 : m < 9 ? 3 : 4\r\n}\r\n\r\n/**\r\n * 计算 当前时辰 或 指定时间 （年月日时分秒）\r\n *\r\n * 凌晨0：00－6：00，\r\n * 早上 6：00-8:00；\r\n * 上午 8：00-12：00，上午是指8-12点工作时间\r\n * 中午12：00-14：00,中午是指12-14点午休时间\r\n * 下午14：00-18：00，下午是指14-18点下午工作时间\r\n * 晚上18：00-21：00；\r\n * 深夜：21：00-24：00\r\n *\r\n * @param { string | number } dt ：指定时间\r\n */\r\nexport const when = function (dt) {\r\n    let hour = _dt(dt).getHours()\r\n    return ['凌晨', '早上', '上午', '中午', '下午', '晚上', '深夜'][\r\n        hour >= 0 && hour <= 6 ? 0 : hour > 6 && hour <= 8 ? 1 : hour > 8 && hour <= 12 ? 2 : hour > 12 && hour <= 14 ? 3 : hour > 14 && hour <= 18 ? 4 : hour > 18 && hour <= 21 ? 5 : 6\r\n    ]\r\n}\r\n\r\n/**\r\n *\r\n * @param { String } key\r\n * @param {String | Number | Date} dt ：日期 或 时间戳 或 日期对象\r\n */\r\nexport const get = function (key, dt) {\r\n    return _details(dt)[Object.keys(_details(dt)).find(i => i.charAt(0) === key || i === key || i.charAt(0) + i.charAt(5) === key || (i === 'month' && key == 'M'))]\r\n}\r\n\r\n/**\r\n * 时间转换成数组\r\n * 获取年月日时分秒\r\n * @param {String | Number} dt\r\n */\r\nexport const toArray = function (dt) {\r\n    return Object.values(_details(dt)).slice(0, 6)\r\n}\r\n/**\r\n *\r\n * 时间转换成对象\r\n * 获取年月日时分秒\r\n */\r\nexport const toObject = function (dt) {\r\n    let r = _details(dt)\r\n    delete r.millisecond\r\n    return r\r\n}\r\n\r\n/**\r\n * 获取 （给定日期 | 当前日期） 对应的回显星期\r\n * 根据 （给定日期 | 当前日期）回显对应的星期\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n * @param {String} prefix :前缀\r\n */\r\nexport const previwWeekByDate = function (dt = new Date(), prefix = '星期') {\r\n    let d = _dt(dt)\r\n    return prefix + ['日', '一', '二', '三', '四', '五', '六'][d.getDay()]\r\n}\r\n\r\n/**\r\n * 获取 （给定日期 | 当前日期） 对应的回显月份\r\n * 根据 （给定日期 | 当前日期）回显对应的月份\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n * @param {String} suffix ：后缀\r\n */\r\nexport const previwMonthByDate = function (dt = new Date(), suffix = '月') {\r\n    let d = _dt(dt)\r\n    return ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'][d.getMonth()] + suffix\r\n}\r\n\r\n/**\r\n * 星期回显\r\n * 只是用来回显\r\n *  @param {String | Number}  i: 回显对应的数字\r\n *  @param {String}  invalidTip: 传入的数字超出有效数字范围的提示语，默认是 Invalid week\r\n *\r\n */\r\nexport const previewWeek = function (i, prefix = '周', invalidTip) {\r\n    if (i === 0) i = 7\r\n    return i > 0 && i < 8 ? prefix + ['一', '二', '三', '四', '五', '六', '日'][i - 1] : invalidTip === undefined ? 'Invalid week' : invalidTip\r\n}\r\n\r\n/**\r\n * 月份回显\r\n * 只是用来回显\r\n * @param { String | Number} i ：回显对应的数字\r\n * @param { String } invalidTip  ：传入的数字超出有效数字范围的提示语，默认是 Invalid week\r\n * @return String\r\n */\r\nexport const previewMonth = function (i, invalidTip) {\r\n    return i > 0 && i < 13 ? ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'][i - 1] + '月' : invalidTip === undefined ? 'Invalid month' : invalidTip\r\n}\r\n\r\n// 周的首末日期\r\nexport const weekFirstLast = function (...args) {\r\n    let dt = _initFormat(args, 'yyyy-MM-dd').dt\r\n    let ft = _initFormat(args, 'yyyy-MM-dd').format\r\n    let w = dt.getDay() == 0 ? 7 : dt.getDay()\r\n    dt.setDate(dt.getDate() - w + 1)\r\n    return {\r\n        first: format(dt, ft),\r\n        last: format(new Date(dt.getFullYear(), dt.getMonth(), dt.getDate() + 6), ft)\r\n    }\r\n}\r\n\r\n// 月的首末日期\r\nexport const monthFirstLast = function (...args) {\r\n    let dt = _initFormat(args, 'yyyy-MM-dd').dt\r\n    let ft = _initFormat(args, 'yyyy-MM-dd').format\r\n    return {\r\n        first: format(new Date(dt.getFullYear(), dt.getMonth(), 1), ft),\r\n        last: format(new Date(dt.getFullYear(), dt.getMonth() + 1, 0), ft)\r\n    }\r\n}\r\n\r\n/**\r\n * ※\r\n * 本周第一天\r\n * @param { String } format ：格式，默认 yyyy-MM-dd\r\n */\r\nexport const getCurWeekFirstDay = function () {\r\n    return weekFirstLast(new Date(), 'yyyy-MM-dd').first\r\n}\r\n\r\n/**\r\n * ※\r\n * 本周最后一天\r\n */\r\nexport const getCurWeekLastDay = function () {\r\n    return weekFirstLast(new Date(), 'yyyy-MM-dd').last\r\n}\r\n\r\n/**\r\n * ※\r\n * 任一月份第一天\r\n */\r\nexport const getMonthFirstDay = function (dt) {\r\n    let d = _dt(dt)\r\n    return format(d, 'yyyy-MM-') + '01'\r\n}\r\n\r\n/**\r\n * ※\r\n * 任一月份最后一天\r\n * @param { String | Number} dt ：日期 或 时间戳\r\n */\r\nexport const getMonthLastDay = function (dt) {\r\n    let d = _dt(dt)\r\n    d.setMonth(d.getMonth() + 1) //月份+1\r\n    d.setDate(1) //日设置成1号\r\n    d.setDate(d.getDate() - 1) //倒退1日到当前月末最后一天\r\n    return format(d, 'yyyy-MM-dd')\r\n}\r\n\r\n/**\r\n * ※\r\n * 获取两个日期相差多少天\r\n * @param {String | Number} d1 ：日期 或 时间戳\r\n * @param {String | Number} d2 ：日期 或 时间戳\r\n */\r\nexport const getDaysByDate = function (d1, d2) {\r\n    let ret = parseInt(Math.abs(new Date(d1) - new Date(d2)) / 86400000)\r\n    return isNaN(ret) ? 0 : ret\r\n}\r\n\r\n/**\r\n * ※\r\n * 获取 （给定日期 | 当前日期）为基准的 半年之前的日期\r\n * @param { String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getHalfYear = function (dt) {\r\n    return format(new Date(_dt(dt) - 15768000000), 'yyyy-MM-dd')\r\n}\r\n\r\n/**\r\n * ※\r\n * gap 间隙，\r\n * 距 （给定日期|当前日期） 所属的周 前进后退 n 周的周首末日期\r\n * @param { Number } n ：前进（+） 后退（-）n 周后的日期\r\n * @param { String | Number } dt ：日期 或 时间戳\r\n * @param { String } ft ：格式\r\n */\r\nexport const getGapWeek = function (n = 0, dt = new Date(), ft = 'yyyy-MM-dd') {\r\n    let { first, last } = weekFirstLast(dt, ft)\r\n    if (!n)\r\n        return {\r\n            first,\r\n            last\r\n        }\r\n    return weekFirstLast(getGapDate(n * 7, n > 0 ? last : first), ft)\r\n}\r\n\r\n/**\r\n * ※\r\n * gap 间隙，意味距  （给定日期|当前日期）前后日期\r\n * 距 （给定日期|当前日期） n 天 的日期\r\n * @param { Number } n ：前进（+） 后退（-）n 天后的日期\r\n * @param { String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getGapDate = function (n = 0, dt = new Date(), ft) {\r\n    let d = _dt(dt)\r\n    d.setDate(d.getDate() + n)\r\n    return format(d, ft || 'yyyy-MM-dd')\r\n}\r\n\r\n/**\r\n * ※\r\n * gap 间隙，意味距  （给定日期|当前日期）工作日（周一~周五的日期）\r\n * @param { String | Number } dt ：日期 或 时间戳\r\n * @param { String } ft ：格式\r\n */\r\nexport const getWeekWorkday = function (dt = new Date(), ft = 'yyyy-MM-dd') {\r\n    let d = new Date(dt)\r\n    let w = d.getDay() == 0 ? 7 : d.getDay()\r\n    d.setDate(d.getDate() - w + 1)\r\n    let first = format(d, ft)\r\n    d.setDate(d.getDate() + 4)\r\n    let last = format(d, ft)\r\n    return {\r\n        first,\r\n        last\r\n    }\r\n}\r\n\r\n/**\r\n * ※\r\n * gap 间隙，意味距  （给定日期|当前日期）工作日（周一~周五的日期）\r\n * @param { Number } n ：n周的工作日的首末日期\r\n * @param { String | Number } dt ：日期 或 时间戳\r\n * @param { String } ft ：格式\r\n */\r\nexport const getGapWeekWorkday = function (n = 0, dt = new Date(), ft = 'yyyy-MM-dd') {\r\n    let { first, last } = getWeekWorkday(dt)\r\n    if (!n)\r\n        return {\r\n            first,\r\n            last\r\n        }\r\n    return getWeekWorkday(getGapDate(n * 5, n > 0 ? last : first), ft)\r\n}\r\n\r\n/**\r\n * ※\r\n * 距 （给定日期|当前日期） n 年 的日期\r\n * @param { Number } n ：前进（+） 后退（-）n 年后的日期\r\n * @param { String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getGapYearDate = function (n = 0, dt = new Date(), ft = 'yyyy-MM-dd') {\r\n    let d = _dt(dt)\r\n    d.setFullYear(d.getFullYear() + n)\r\n    return format(d, ft)\r\n}\r\n\r\n/**\r\n * ※\r\n * 距 （给定日期 | 当前日期） n 月 的日期\r\n * @param { Number } n ：前进（+） 后退（-）n 月后的日期\r\n * @param { String | Number } dt dt ：日期 或 时间戳\r\n */\r\nexport const getGapMonthDate = function (n = 0, dt = new Date(), ft = 'yyyy-MM-dd') {\r\n    let d = _dt(dt)\r\n    d.setMonth(d.getMonth() + n)\r\n    return format(d, ft)\r\n}\r\n\r\n/**\r\n * 获取当前日期所在周任意星期对应的日期 ,比如我想知道这周5的日期你能告诉我吗？这个函数 就可以告诉你\r\n * @param { Number } week ：星期\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getWeekByDate = function (week, dt, ft = 'yyyy-MM-dd') {\r\n    if (!week) return ''\r\n    // 获取日期时间\r\n    let d = _dt(dt)\r\n    //统一：用户传入 0 或 7 都是星期日\r\n    let w = week === 0 ? 7 : week\r\n    let i = d.getDay() === 0 ? 7 : d.getDay()\r\n    if (w !== i) d.setDate(d.getDate() - (i - w))\r\n    return format(d, ft)\r\n}\r\n\r\n/**\r\n * 获取（给定日期 | 当前日期） 所在对应月份的第几周\r\n * @param {String | Number } dt ：日期 或 时间戳info\r\n */\r\nexport const getMonthWeek = function (dt) {\r\n    let d = format(_dt(dt), 'yyyy-MM-dd')\r\n    let info = getMonthWeekInfo(d)\r\n    return info[d].w\r\n}\r\n\r\n/**\r\n * 获取（给定日期 | 当前日期） 所在对应月份的星期信息\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getMonthWeekInfo = function (dt) {\r\n    let dd = _dt(dt),\r\n        ret = {},\r\n        n = 1,\r\n        isFirst = true,\r\n        days = getMonthDays(dd),\r\n        Month = dd.getMonth() + 1,\r\n        prefix = dd.getFullYear() + '-' + padStart(Month, 2, 0) + '-'\r\n    for (let i = 1; i < days + 1; i++) {\r\n        let re = weekFirstLast(prefix + i)\r\n        let last = re.last\r\n        if (month(last) !== Month && isFirst) {\r\n            n++\r\n            isFirst = false\r\n        } else if (new Date(prefix + i).getDay() == 1) {\r\n            n++\r\n        }\r\n        ret[prefix + padStart(i, 2, 0)] = {\r\n            ...re,\r\n            w: n,\r\n            d: days\r\n        }\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * 获取（给定日期 | 当前日期） 所在对应月份天数\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getMonthDays = function (dt) {\r\n    let dd = _dt(dt)\r\n    return new Date(dd.getFullYear(), dd.getMonth() + 1, 0).getDate()\r\n}\r\n\r\n/**\r\n * 获取 （给定日期 | 当前日期） 所在对应年份的第几周\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getYearWeek = function (dt) {\r\n    let dd = _dt(dt)\r\n    let d1 = new Date(dd.getFullYear(), dd.getMonth(), dd.getDate()),\r\n        d2 = new Date(dd.getFullYear(), 0, 1),\r\n        d = Math.round((d1 - d2) / 86400000)\r\n    return Math.ceil((d + (d2.getDay() + 1 - 1)) / 7)\r\n}\r\n\r\n/**\r\n * 获取 （给定日期 | 当前日期） 所在对应季度的第几周\r\n * @param {String | Number } dt ：日期 或 时间戳\r\n */\r\nexport const getQuarterWeek = function (dt) {\r\n    let dd = _dt(dt),\r\n        y = dd.getFullYear(),\r\n        m = dd.getMonth() + 1,\r\n        d = dd.getDate(),\r\n        ret = getYearWeek([y, m, d].join('/'))\r\n    if (m < 4) {\r\n        return ret\r\n    } else {\r\n        let month = m < 7 ? 4 : m < 10 ? 7 : 10\r\n        let week = ret - getYearWeek([y, month, 1].join('/'))\r\n        var day = new Date(y, month, 1)\r\n        if (day.getDay() > 1) week += 1\r\n        return week\r\n    }\r\n}\r\n\r\n/**\r\n * 生成 基于当前 / 指定时间的 过去 n 天时间（包含当天日期）\r\n * @param {Number} days 基于当前 / 指定时间的 过去 n 天时间（包含当天日期）\r\n * @param {Boolean} dt 指定时间\r\n * @return 日期数组\r\n */\r\nexport const getPassDaysDate = function (days, dt) {\r\n    if (!arguments.length) return []\r\n    return [...Array(days * 1 + 1).keys()]\r\n        .map(days => new Date((dt ? new Date(dt) : Date.now()) - 86400000 * days).toLocaleDateString())\r\n        .map(item =>\r\n            item\r\n                .split(/\\/|-/)\r\n                .map(i => padStart(i, 2, 0))\r\n                .join('-')\r\n        )\r\n        .splice(1)\r\n}\r\n\r\n/**\r\n * 计算两个日期间所有日期，以数组形式返回\r\n * 新增时间：2020/8/23\r\n * @param { string | number } startDate : 开始日期（13位时间戳 | 字符串日期）\r\n * @param { string | number } endDate ：结束日期（13位时间戳 | 字符串日期）\r\n * @return 日期间所有日期，以数组形式返回\r\n */\r\nexport const getBetweenDates = function (startDate, endDate) {\r\n    // 如果开始日期都没有，直接返回 []\r\n    if (!startDate) return []\r\n    // 辅助函数\r\n    let helper = (s, i) => new Date(+new Date(s) + i * 86400000).toLocaleDateString().replace(/\\//g, '-')\r\n    // 开始日期时间戳\r\n    let startDateStamp = +new Date(new Date(startDate).toLocaleDateString())\r\n    // 结束日期时间戳\r\n    let endDateStamp = endDate ? +new Date(new Date(endDate).toLocaleDateString()) : +new Date(new Date().toLocaleDateString())\r\n    // 如果两者相等\r\n    if (startDateStamp === endDateStamp) return [helper(new Date(endDate ? new Date() : startDate), 0)]\r\n    // 获取最小的日期作为开始日期\r\n    startDate = startDateStamp < endDateStamp ? new Date(startDateStamp) : new Date(endDate ? endDateStamp : +new Date())\r\n    // 获取最大的日期作为结束日期\r\n    endDate = startDateStamp < endDateStamp ? new Date(endDate ? endDateStamp : +new Date()) : new Date(startDateStamp)\r\n    // 计算相差天数\r\n    let gapDays = parseInt(Math.abs(startDateStamp - endDateStamp) / 86400000) + 1\r\n    // 返回结果\r\n    return Array(gapDays)\r\n        .fill(0)\r\n        .reduce((p, c, i) => [...p, helper(startDate, i)], [])\r\n}\r\n\r\n/**\r\n * @description: 获取指定年/当前分的 所属的52周的所有首末时间段\r\n * @param { String | Number } year: 年份\r\n */\r\nexport const getYearWeeks = function (year) {\r\n    let ret = Array(53)\r\n        .fill(0)\r\n        .map((_, i) => {\r\n            let week = getGapWeek(i, String(year || new Date().getFullYear()), 'MM/dd YYYY')\r\n            return week.first.slice(0, 5) + '~' + week.last.slice(0, 5)\r\n        })\r\n    if (ret && ret.length && ret[0].substr(0, 2) === '12') {\r\n        ret.splice(0, 1)\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * 时刻回显\r\n * @param {Number String Date} dt\r\n */\r\nexport const previewMoment = function (dt) {\r\n    let target = +new Date(_dt(dt)),\r\n        cur = +new Date(),\r\n        diff = parseInt((cur - target) / 1e3),\r\n        minute = parseInt(diff / 60),\r\n        hour = parseInt(diff / 3600)\r\n    return diff <= 60\r\n        ? '刚刚'\r\n        : minute < 60\r\n        ? minute + '分钟前'\r\n        : isToday(_dt(dt))\r\n        ? hour + '小时前'\r\n        : isYesterday(_dt(dt))\r\n        ? '昨天 ' + format(_dt(dt), 'hh:mm')\r\n        : year(_dt(dt)) === year()\r\n        ? format(_dt(dt), 'MM/dd hh:mm')\r\n        : format(_dt(dt), 'YYYY/MM/dd hh:mm')\r\n}\r\n\r\n/*后端时间格式化*/\r\nexport const fmtDt = function (dt, fmt = 'yyyy-MM-dd hh:mm:ss') {\r\n    if (dt.indexOf('Date') > -1) {\r\n        var d = new Date(dt.slice(6, -7) * 1)\r\n        return format(d, fmt)\r\n    } else if (dt.indexOf('T') > -1) {\r\n        return format(dt.split('T').join(' '), fmt)\r\n    } else {\r\n        return format(dt, fmt)\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 倒计时\r\n * @param {*} targetDate ：目标日期\r\n * @param {*} cb：倒计时结束的回调\r\n */\r\nexport const countTime = function (targetDate, cb) {\r\n    let timer = setInterval(function () {\r\n        let targetStemp = new Date(targetDate.replace(/-/g, '/')).getTime() / 1000\r\n        let nowStemp = Date.parse(new Date()) / 1000\r\n        let t = targetStemp - nowStemp\r\n        if (t >= 0) {\r\n            let d = Math.floor(t / 86400)\r\n            let h = padStart(Math.floor((t % 86400) / 3600), 2, 0)\r\n            let m = padStart(Math.floor((t % 86400) % 3600) / 60, 2, 0)\r\n            let s = padStart(t % 60, 2, 0)\r\n            cb &&\r\n                cb({\r\n                    date: d,\r\n                    hour: h,\r\n                    minute: m,\r\n                    second: s\r\n                })\r\n        } else {\r\n            clearInterval(timer)\r\n            timer = null\r\n            cb && cb()\r\n            return false\r\n        }\r\n    }, 1000)\r\n}\r\n","/*\r\n * @Description: Rdate 日期核心方法\r\n * @Author: shufei\r\n * @Date: 2020-10-08 09:38:52\r\n * @LastEditTime: 2020-11-13 11:56:03\r\n * @LastEditors: shufei\r\n */\r\n\r\nimport { _initFormat, padStart } from './helper'\r\nimport { when, previwWeekByDate } from './date'\r\n\r\n/**\r\n * ※  Rdate 核心方法\r\n * @param  {...any} args :形参，生效的最多为前两个参数\r\n * 1个参数情况：\r\n *      1.1 参数为格式，则默认格式化当前时间\r\n *      1.2 参数为时间戳或字符串时间，则使用默认格式去格式化化给定的 时间戳或字符串时间\r\n * 2个参数情况：\r\n * 第一个参数表示格式化的日期，可以是时间戳或字符串时间\r\n * 第二个参数表示格式\r\n */\r\nexport const format = function (...args) {\r\n    let dt = _initFormat(args, 'yyyy-MM-dd hh:mm:ss').dt\r\n    let ft = _initFormat(args, 'yyyy-MM-dd hh:mm:ss').format\r\n    let ret = {\r\n        Y: String(dt.getFullYear()),\r\n        y: String(dt.getFullYear()),\r\n        M: padStart(dt.getMonth() + 1, 2, 0),\r\n        d: padStart(dt.getDate(), 2, 0),\r\n        h: padStart(dt.getHours(), 2, 0),\r\n        H: padStart(dt.getHours(), 2, 0),\r\n        m: padStart(dt.getMinutes(), 2, 0),\r\n        s: padStart(dt.getSeconds(), 2, 0),\r\n        W: previwWeekByDate(dt, '周'),\r\n        w: previwWeekByDate(dt),\r\n        t: when(dt)\r\n    }\r\n    ft = ft.replace(/\\[([^\\]]+)]|y{1,4}|Y{1,4}|M{1,2}|d{1,2}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|t|w|W|S/g, function (b) {\r\n        // 匹配中的首字符\r\n        let k = b.charAt(0)\r\n        // 匹配到的字符串长度\r\n        let len = b.length\r\n        if (b.includes('[')) {\r\n            // 如果是模板字符串，去除首尾返回\r\n            return b.slice(1, -1)\r\n        } else if (['Y', 'y'].includes(k)) {\r\n            // 如果是年份，根据正则处理返回\r\n            return b.replace(new RegExp('((' + k + ')+)', 'g'), a => ret[k].substr(4 - a.length))\r\n        } else {\r\n            // 如果匹配字符串长度为1并且非星期（W、w）和 非时辰（t）转成实际数字 其他一律原样返回\r\n            return len == 1 && !['W', 'w', 't'].includes(k) ? Number(ret[k]) : ret[k]\r\n        }\r\n    })\r\n    return ft\r\n}\r\n","/**\r\n * # 时间戳\r\n */\r\nimport { _dt } from './helper'\r\n/**\r\n * ※\r\n * 获取 （给定日期 | 当前日期） 前进（+）后退（-）n 天后的时间戳\r\n * @param { Number } n : 前进（+）后退（-）n 天后的时间戳，不传默认是0，当天\r\n * @param { String } dt : 给定日期\r\n */\r\n\r\nexport const getStamp = function (dt, n) {\r\n    let a = arguments\r\n    if (!a.length) return +new Date()\r\n    // 如果只有 一个参数,则视为对当前时间的加减\r\n    if (a.length == 1 && typeof a[0] === 'number') {\r\n        n = a[0]\r\n        dt = undefined\r\n    }\r\n    let d = _dt(dt)\r\n    d.setDate(d.getDate() + (n === undefined ? 0 : n))\r\n    return +d\r\n}\r\n\r\n/**\r\n * ※\r\n * 获取基于 （给定日期/当前时间） 的 前一天/后一天的时间戳\r\n * @param  { String } dt : 给定日期\r\n */\r\nexport const getStampBeforAfter = function (dt) {\r\n    let d = _dt(dt),\r\n        b\r\n    d.setDate(d.getDate() - 1)\r\n    b = +d\r\n    d.setDate(d.getDate() + 2)\r\n    return { before: b, after: +d }\r\n}\r\n\r\n/**\r\n * ※\r\n * 定日期/今日 起止日期时间（00：00：00 ~ 23：59：59）\r\n * @param { String } dt: 给定日期\r\n */\r\nexport const getStampStartEnd = function (dt) {\r\n    let d = _dt(dt)\r\n    return {\r\n        start: +new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, 0, 0),\r\n        end: +new Date(d.getFullYear(), d.getMonth(), d.getDate(), 23, 59, 59)\r\n    }\r\n}\r\n\r\n/**\r\n * ※\r\n * 获取两个时间戳相差多少天\r\n * @param { Number } stamp1 ：时间戳\r\n * @param { Number } stamp2 ：时间戳\r\n */\r\nexport const getDaysByStamp = function (stamp1, stamp2) {\r\n    return parseInt(Math.abs(stamp1 - stamp2) / 86400000)\r\n}\r\n","/*\r\n * @Description: 日期时间集成类 Rdate\r\n * @Author: shufei\r\n * @Date: 2020-08-24 08:26:55\r\n * @LastEditTime: 2020-12-04 09:01:37\r\n * @LastEditors: shufei\r\n */\r\n\r\nimport { format } from './lib/core' //核心方法\r\nimport * as common from './lib/date' //常用方法\r\nimport * as verify from './lib/verify' //时间戳\r\nimport * as stamp from './lib/stamp' //验证\r\nfunction Rdate() {\r\n    if (!(this instanceof Rdate)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nRdate.prototype = {\r\n    /** 核心方法*/\r\n    format,\r\n    /** 常用方法*/\r\n    ...common,\r\n    /** 验证方法*/\r\n    ...verify,\r\n    /** 时间戳方法*/\r\n    ...stamp\r\n}\r\nexport default new Rdate()\r\n"],"names":["_dt","dt","Date","indexOf","replace","_initFormat","args","ft","a","b","format","length","isNaN","valueOf","_details","year","d","getFullYear","month","getMonth","date","getDate","hour","getHours","minute","getMinutes","second","getSeconds","millisecond","getMilliseconds","padStart","string","pad","s","String","Array","join","isDate","str","ret","match","isDateTime","isToday","toLocaleDateString","isYesterday","setDate","when","previwWeekByDate","getDay","weekFirstLast","w","first","last","getGapWeek","n","getGapDate","getWeekWorkday","getYearWeek","dd","d1","d2","Math","round","ceil","y","thisYear","getMonthWeekInfo","isFirst","days","getMonthDays","Month","prefix","i","re","m","key","Object","keys","find","charAt","values","slice","r","suffix","invalidTip","undefined","setMonth","parseInt","abs","setFullYear","week","arguments","_toConsumableArray","map","now","item","split","splice","startDate","endDate","helper","startDateStamp","endDateStamp","gapDays","fill","reduce","p","c","_","substr","target","cur","diff","fmt","targetDate","cb","timer","setInterval","t","getTime","parse","clearInterval","floor","h","Y","M","H","W","k","len","includes","RegExp","Number","before","after","start","end","stamp1","stamp2","Rdate","this","TypeError","prototype","common","verify","stamp"],"mappings":"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"}