{"version":3,"file":"index.js","sources":["../../../src/lib/url/lib/core.js","../../../src/lib/url/index.js"],"sourcesContent":["/**\r\n * 获取当期URL地址\r\n */\r\nexport const getCurUrl = function () {\r\n    return window.location.href\r\n}\r\n\r\n/**\r\n * 获取URL格式化后的对象\r\n * @param {String} url :格式的url\r\n */\r\nexport const formatUrl = function (url = window.location.href) {\r\n    return new URL(url)\r\n}\r\n\r\n/**\r\n * 获取url查询参数\r\n * @param {String} url ：url地址\r\n */\r\nexport const getQuery = function (url = window.location.href) {\r\n    try {\r\n        return url.includes('?')\r\n            ? url\r\n                  .split('?')[1]\r\n                  .match(/([^&=]*)=([^&]*)/g)\r\n                  .reduce((p, c) => ((p[c.split('=')[0]] = decodeURIComponent(c.split('=')[1])), p), {})\r\n            : {}\r\n    } catch (e) {\r\n        return {}\r\n    }\r\n}\r\n\r\n/**\r\n * 获取url查询参数根据key\r\n * @param {Array} keys ：\r\n */\r\nexport const getQueryByKeys = function (keys = []) {\r\n    let o = getQuery()\r\n    if (!keys.length) return o\r\n    return keys.reduce((p, c) => ((p[c] = o[c]), p), {})\r\n}\r\n\r\n/**\r\n * url参数序列化\r\n * @param { String } baseURL ：url地址\r\n * @param { Object } params  ：参数对象\r\n * @return 参数序列化后的字符串\r\n */\r\nexport const urlSerialize = function (baseURL, params) {\r\n    return Object.keys(params).reduce((p, c) => (p += (p === baseURL ? '?' : '&') + `${c}=${encodeURIComponent(params[c])}`), baseURL)\r\n}\r\n\r\n/**\r\n * url参数序列化\r\n * @param { String } baseURL ：url地址\r\n * @param { Object } params  ：参数对象\r\n * @return 参数序列化后的字符串\r\n */\r\nexport const paramSerialize = function (params = {}, baseURL = window.location.href, isNeed = false) {\r\n    let baseURLParam = isNeed ? { ...getQuery(baseURL), ...params } : params\r\n    let baseUrl = baseURL.split('?')[0]\r\n    return urlSerialize(baseUrl, baseURLParam)\r\n}\r\n\r\n/**\r\n * @description: 纯参数序列化\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const serialize = function (params = {}) {\r\n    return Object.keys(params)\r\n        .reduce((p, c) => (p += `&${c}=${encodeURIComponent(params[c])}`), '')\r\n        .slice(1)\r\n}\r\n\r\n/**\r\n * 企业微信授权url格式方法\r\n * 业务专属方法\r\n * @param {String} url：企业微信授权回来的地址\r\n */\r\nexport const wxAuthUrlFmt = function (url) {\r\n    // 匹配 url中都 从开始? 到#结束都字符串\r\n    let gap = url.match(/\\?(\\S*)#/)\r\n    // 如果能够匹配\r\n    if (gap && gap.length) {\r\n        // 获取?和#之间都字符串\r\n        gap = gap[0].slice(1, -1)\r\n        // url中?到#前一个都所有字符串被空字符串替换掉 获取到url前半部分\r\n        url = url.replace('?' + gap, '')\r\n        // 匹配gap中的参数\r\n        let param = gap.match(/([^&=]*)=([^&]*)/g)\r\n        // 如果参数数组有值\r\n        if (param && param.length) {\r\n            // 参数数组过滤掉 值中存在=号的key\r\n            param = param.filter(i => i.split('=').length == 2)\r\n            // 如果前半部分存在?,就进行检测参数\r\n            if (url.includes('?')) {\r\n                let ret = [...new Set(param)].join('&') + '&' + url.split('?')[1]\r\n                param = ret.match(/([^&=]*)=([^&]*)/g).filter(i => i.split('=').length == 2)\r\n            }\r\n            // 返回\r\n            return url.split('?')[0] + '?' + [...new Set(param)].join('&')\r\n        } else {\r\n            return url + '&' + gap\r\n        }\r\n    } else {\r\n        return url\r\n    }\r\n}\r\n\r\n/**\r\n * url模板 参数格式化(get请求url模板)\r\n *\r\n *  @param {String}  URL: 模板路径，例：'/uap/msg/announcementRecord/{sysId}/{tenantId}/{userId}' 或 '/uap/msg/announcementRecord'\r\n *  @param {Object}  params: 传入的参数，包含路径参数 或 不包含\r\n *  @param {Boolean} flag：是否拼接路径和查询参数\r\n *\r\n *  PS：flag为true时，一定是GET请求，GET请求才会拼接参数到URL后面\r\n */\r\n\r\nexport const urlTmtFmt = function (URL, params) {\r\n    let url = /\\{(\\w+)\\}/g.test(URL)\r\n        ? URL.replace(/\\{(\\w+)\\}/g, (_, b) => {\r\n              let tmp = params[b]\r\n              delete params[b]\r\n              return tmp\r\n          })\r\n        : URL\r\n    return Object.keys(params).reduce((pre, cur) => (pre += (pre === url ? '?' : '&') + `${cur}=${params[cur]}`), url)\r\n}\r\n\r\n/**\r\n * 删除url上指定的参数 返回删除后的url，如果没有原封不动的返回原来的url即可\r\n * @param {String} keyName : 需要删除的入了身上的参数key\r\n * @param {String} url : url\r\n */\r\nexport const urlParamDelByKey = function (keyName, url = location.href) {\r\n    // url 字符串中没有 匹配到这个 keyname 直接返回 ||如果没有问号 直接返回\r\n    if (url.indexOf(keyName) === -1 || url.indexOf('?') === -1) return url\r\n    let parseStr = url.split('?')[1]\r\n    let arr = parseStr.split('&')\r\n    let targetIndex = arr.findIndex(item => item.split('=')[0] === keyName)\r\n    if (targetIndex === -1) return url\r\n    arr.splice(targetIndex, 1)\r\n    return url.split('?')[0] + (arr.length ? '?' + arr.join('&') : '')\r\n}\r\n\r\n/**\r\n *\r\n * @param {Object} opt : 参数对象\r\n * @param {String} url : url\r\n */\r\nexport const urlParamAdd = function (opt = {}, url = window.location.href) {\r\n    let keyArr = Object.keys(opt)\r\n    if (!keyArr.length) return url\r\n    // 1. 对url身上没有任何参数的url 2. 对url身上已经有参数的url\r\n    if (url.indexOf('?') === -1) {\r\n        return keyArr.reduce((pre, cur) => (pre += (pre === url ? '?' : '&') + `${cur}=${opt[cur]}`), url)\r\n    } else {\r\n        var baseUrl = url.split('?')[0]\r\n        var param = Object.assign(getQuery(url), opt)\r\n        // 获取 参数 检查是否已存在相同key，有则覆盖\r\n        return Object.keys(param).reduce((pre, cur) => (pre += (pre === baseUrl ? '?' : '&') + `${cur}=${param[cur]}`), baseUrl)\r\n    }\r\n}\r\n/**\r\n * url地址校验\r\n * @param {String} url\r\n */\r\nexport const isUrl = function (url = window.location.href) {\r\n    return !!url.match(/(?:http|https|mailto|ftp|tel)\\:\\/\\/[^\\u4e00-\\u9fa5\\s<>]*/g)\r\n}\r\n\r\n/**\r\n *获取url查询参数\r\n * @param { String } url ：查询的url\r\n */\r\nexport const getUrlParams = function (url) {\r\n    var url = url || location.href\r\n    var res = {},\r\n        url = url\r\n    //如果url里面有?\r\n    if (url.indexOf('?') != -1) {\r\n        //如果url后面有 # 就去掉\r\n        if (url.indexOf('#') != -1) url = url.slice(0, url.length - 1)\r\n        //获取 key / value 组合的 数组\r\n        var data = url.split('?')[1].split('&')\r\n        //遍历这个数组\r\n        for (var i = 0; i < data.length; i++) {\r\n            //分离每一项成数组 [key,value]\r\n            var list = data[i].split('=')\r\n            //res继承每一项的 key和value\r\n            res[list[0]] = decodeURI(list[1])\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\n/**\r\n *获取url查询参数\r\n * @param { String } url ：查询的url\r\n */\r\nexport const getUrlParams2 = function (url) {\r\n    var url = url || location.href\r\n    var ret = {}\r\n    if (url.indexOf('?') == -1) {\r\n        return ret\r\n    }\r\n    var paramStr = url.split('?')[1]\r\n    var paramArr = paramStr.split('&')\r\n    for (var i = 0, n = paramArr.length; i < n; i++) {\r\n        var item = paramArr[i].split('=')\r\n        ret[item[0]] = decodeURI(item[1])\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * HTTP 跳转 HTTPS\r\n */\r\nexport const httpsRedirect = function () {\r\n    if (location.protocol !== 'https:') location.replace('https://' + location.href.split('//')[1])\r\n}\r\n\r\n/**\r\n * @description: 获取url的域名URL\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const getDomainURI = function (e) {\r\n    var t = /(https|http):\\/\\/([^\\/]+)\\//i,\r\n        n = e.match(t)\r\n    return n ? n[0] : ''\r\n}\r\n","/*\r\n * @Description:\r\n * @Author: shufei\r\n * @Date: 2020-08-24 08:26:55\r\n * @LastEditTime: 2020-12-04 09:58:53\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * Rurl\r\n * URL 类\r\n * 均为URL相关信息获取\r\n */\r\n\r\nimport * as url from './lib/core'\r\n\r\nfunction Rurl() {\r\n    if (!(this instanceof Rurl)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nRurl.prototype = url\r\nexport default new Rurl()\r\n"],"names":["getQuery","url","window","location","href","includes","split","match","reduce","p","c","decodeURIComponent","e","urlSerialize","baseURL","params","Object","keys","encodeURIComponent","Rurl","this","TypeError","prototype","URL","o","length","baseURLParam","baseUrl","slice","gap","replace","param","filter","i","_toConsumableArray","Set","join","test","_","b","tmp","pre","cur","keyName","indexOf","arr","targetIndex","findIndex","item","splice","opt","keyArr","assign","res","data","list","decodeURI","ret","paramArr","n","protocol"],"mappings":"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"}