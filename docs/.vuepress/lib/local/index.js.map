{"version":3,"file":"index.js","sources":["../../../src/lib/local/lib/core.js","../../../src/lib/dom/lib/core.js","../../../src/lib/local/index.js"],"sourcesContent":["import { bytesToSize } from '../../dom/lib/core.js'\r\n\r\n/**\r\n * 验证一个数据是否是纯净的对象\r\n * @param {any}} o\r\n */\r\nexport const isPureoBbject = function (o) {\r\n    return Object.prototype.toString.call(o).slice(8, -1) === 'Object'\r\n}\r\n/**\r\n * 增\r\n * 添加一个localStorge\r\n * 受参形式：① key-value，② 对象形式\r\n */\r\nexport const set = function () {\r\n    let args = [...arguments]\r\n    if (args.length == 2) {\r\n        localStorage.setItem(args[0], typeof args[1] == 'string' ? args[1] : JSON.stringify(args[1]))\r\n    } else if (args.length == 1 && isPureoBbject(args[0])) {\r\n        for (let k in args[0]) {\r\n            localStorage.setItem(k, typeof args[0][k] == 'string' ? args[0][k] : JSON.stringify(args[0][k]))\r\n        }\r\n    }\r\n}\r\n/**\r\n * 设置一个\r\n * key, value, expire\r\n * 设置多个\r\n * {},expire\r\n */\r\nexport const set1 = function (...args) {\r\n    let [a, b, c] = args\r\n    if (args.length == 1) {\r\n        if (isPureoBbject(a)) {\r\n            for (let k in args[0]) {\r\n                localStorage.setItem(k, typeof a[k] == 'string' ? a[k] : JSON.stringify(a[k]))\r\n            }\r\n        }\r\n    } else if (args.length == 2) {\r\n        if (typeof a === 'string') {\r\n            localStorage.setItem(a, typeof b === 'string' ? b : JSON.stringify(b))\r\n        } else if (isPureoBbject(a)) {\r\n            for (let k in a) {\r\n                localStorage.setItem(\r\n                    k,\r\n                    JSON.stringify({\r\n                        startTime: +new Date(), //创建并存入时间戳\r\n                        expires: b, //过期时间\r\n                        value: a[k]\r\n                    })\r\n                )\r\n            }\r\n        }\r\n    } else if (args.length == 3) {\r\n        if (typeof a === 'string') {\r\n            localStorage.setItem(\r\n                a,\r\n                JSON.stringify({\r\n                    startTime: +new Date(), //创建并存入时间戳\r\n                    expires: c, //过期时间\r\n                    value: b\r\n                })\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 删：最终目标：本地没有该字段\r\n * @param { string } p\r\n * 受参形式：① ：key ②：[key1，key2]\r\n */\r\nexport const del = function (o) {\r\n    if (typeof o == 'string') {\r\n        localStorage.removeItem(o)\r\n    } else if (Array.isArray(o) && o.every(i => typeof i == 'string')) {\r\n        o.forEach(key => localStorage.removeItem(key))\r\n    }\r\n}\r\n\r\n/**\r\n * 改\r\n * 受参形式：①：key - value, 直接新值覆盖旧值进行修改\r\n */\r\nexport const update = function () {\r\n    let args = [...arguments]\r\n    if (args.length == 2 && typeof args[0] === 'string') {\r\n        localStorage.setItem(args[0], JSON.stringify(args[1]))\r\n    }\r\n}\r\n\r\n/**\r\n * 查看获取局部/全部信息\r\n * @param { String } keyName\r\n */\r\nexport const get = function (keyName) {\r\n    // 获取所有的本地缓存字段放到一个对象里面，\r\n    let obj = getStore()\r\n    if (!Object.keys(obj)) {\r\n        return null\r\n    } else {\r\n        return keyName === undefined ? obj : obj[keyName]\r\n    }\r\n}\r\n\r\nexport const get1 = function (key) {\r\n    let item = localStorage.getItem(key)\r\n    // 先将拿到的试着进行json转为对象的形式\r\n    try {\r\n        item = JSON.parse(item)\r\n    } catch (error) {\r\n        // eslint-disable-next-line no-self-assign\r\n        item = item\r\n    }\r\n    // 如果有startTime的值，说明设置了失效时间\r\n    if (item && item.startTime) {\r\n        // 如果大于就是过期了，如果小于或等于就还没过期\r\n        if (new Date() - item.startTime > item.expires) {\r\n            localStorage.removeItem(key)\r\n            return false\r\n        } else {\r\n            return item.value\r\n        }\r\n    } else {\r\n        return item\r\n    }\r\n}\r\n\r\n/**\r\n *  @description: 获取所有localStorage\r\n */\r\nexport const getStore = function () {\r\n    let len = localStorage.length\r\n    if (!len) return {}\r\n    let ret = {}\r\n    for (let i = 0; i < len; i++) {\r\n        let key = localStorage.key(i)\r\n        try {\r\n            ret[key] = JSON.parse(localStorage.getItem(key))\r\n        } catch (error) {\r\n            ret[key] = localStorage.getItem(key)\r\n        }\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * @description: 清除\r\n */\r\nexport const clear = function () {\r\n    localStorage.clear()\r\n}\r\n\r\n/**\r\n * @description: 移除\r\n */\r\nexport const remove = function () {\r\n    if (arguments.length == 1) {\r\n        if (typeof arguments[0] === 'string') {\r\n            localStorage.removeItem(arguments[0])\r\n        } else if (Array.isArray(arguments[0])) {\r\n            if (arguments[0].every(i => typeof i === 'string')) {\r\n                arguments[0].forEach(i => localStorage.removeItem(i))\r\n            }\r\n        }\r\n    }\r\n}\r\n/**\r\n * 是否开启 localStorage 的自定义事件：通过window.addEventListener 去监听\r\n * setItemEvent\r\n * getItemEvent\r\n * removeItemEvent\r\n */\r\nexport const openEventListener = function () {\r\n    //监听自定义事件 setItemEvent\r\n    localStorage.setItem = (Orgin => {\r\n        return function (key, value) {\r\n            let setItemEvent = new CustomEvent('setItemEvent', { detail: { setKey: key, value } })\r\n            window.dispatchEvent(setItemEvent)\r\n            Orgin.call(this, key, typeof value == 'string' ? value : JSON.stringify(value))\r\n        }\r\n    })(localStorage.setItem)\r\n\r\n    //监听自定义事件 getItemEvent\r\n    localStorage.getItem = (Orgin => {\r\n        return function (key) {\r\n            let result = JSON.parse(Orgin.call(this, key))\r\n            let getItemEvent = new CustomEvent('getItemEvent', { detail: { getKey: key, value: result } })\r\n            window.dispatchEvent(getItemEvent)\r\n            return result\r\n        }\r\n    })(localStorage.getItem)\r\n\r\n    //监听自定义事件 removeItemEvent\r\n    localStorage.removeItem = (Orgin => {\r\n        return function (key) {\r\n            let removeItemEvent = new CustomEvent('removeItemEvent', { detail: { removeKey: key } })\r\n            window.dispatchEvent(removeItemEvent)\r\n            Orgin.call(this, key)\r\n        }\r\n    })(localStorage.removeItem)\r\n}\r\n\r\n/**\r\n * 是否开启 localStorage 的自定义事件 setItemEvent：通过window.addEventListener 去监听\r\n * setItemEvent\r\n */\r\nexport const openSetItemEvent = function () {\r\n    //监听自定义事件 setItemEvent\r\n    localStorage.setItem = (Orgin => {\r\n        return function (key, value) {\r\n            let setItemEvent = new CustomEvent('setItemEvent', { detail: { setKey: key, value } })\r\n            window.dispatchEvent(setItemEvent)\r\n            Orgin.call(this, key, typeof value == 'string' ? value : JSON.stringify(value))\r\n        }\r\n    })(localStorage.setItem)\r\n}\r\n\r\n/**\r\n * 是否开启 localStorage 的自定义事件 getItem：通过window.addEventListener 去监听\r\n * getItemEvent\r\n */\r\nexport const openGetItemEvent = function () {\r\n    //监听自定义事件 getItemEvent\r\n    localStorage.getItem = (Orgin => {\r\n        return function (key) {\r\n            let result = JSON.parse(Orgin.call(this, key))\r\n            let getItemEvent = new CustomEvent('getItemEvent', { detail: { getKey: key, value: result } })\r\n            window.dispatchEvent(getItemEvent)\r\n            return result\r\n        }\r\n    })(localStorage.getItem)\r\n}\r\n\r\n/**\r\n * 是否开启 localStorage 的自定义事件 removeItemEvent：通过window.addEventListener 去监听\r\n * removeItemEvent\r\n */\r\nexport const openRemoveItemEvent = function () {\r\n    //监听自定义事件 removeItemEvent\r\n    localStorage.removeItem = (Orgin => {\r\n        return function (key) {\r\n            let removeItemEvent = new CustomEvent('removeItemEvent', { detail: { removeKey: key } })\r\n            window.dispatchEvent(removeItemEvent)\r\n            Orgin.call(this, key)\r\n        }\r\n    })(localStorage.removeItem)\r\n}\r\n\r\n/**\r\n * @description:  新增 获取所有带过期时间的数据\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const getHasExpired = function () {\r\n    let o = getStore(),\r\n        ret = {}\r\n    for (let k in o) {\r\n        if (isPureoBbject(o[k]) && o[k].hasOwnProperty('expires')) {\r\n            ret[k] = o[k]\r\n        }\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * @description:  新增 获取所有带过期时间的keys\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const getHasExpiredKeys = function () {\r\n    let o = getStore(),\r\n        expiredArr = []\r\n    for (let k in o) {\r\n        if (isPureoBbject(o[k]) && o[k].hasOwnProperty('expires')) {\r\n            expiredArr.push(k)\r\n        }\r\n    }\r\n    return expiredArr\r\n}\r\n\r\n/**\r\n * @description:  新增 获取所有已经过期的数据信息\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const getExpired = function () {\r\n    let o = getStore(),\r\n        ret = {\r\n            keys: [],\r\n            val: {}\r\n        }\r\n    for (let k in o) {\r\n        if (isPureoBbject(o[k]) && o[k].hasOwnProperty('expires')) {\r\n            if (new Date() - o[k].startTime > o[k].expires) {\r\n                ret.keys.push(k)\r\n                ret.val[k] = o[k]\r\n            }\r\n        }\r\n    }\r\n    return ret\r\n}\r\n\r\n/**\r\n * @description: 清除过期的缓存\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const clearExpired = function (clearKeys) {\r\n    // 获取过期缓存\r\n    let allKeys = getExpired().keys\r\n    // 不传参数，就清除所有过期的本地缓存\r\n    if (!arguments.length) {\r\n        allKeys.length && remove(allKeys)\r\n    } else {\r\n        if (typeof clearKeys === 'string' && allKeys.includes(clearKeys)) {\r\n            remove(clearKeys)\r\n        } else if (Array.isArray(clearKeys) && clearKeys.length) {\r\n            for (let i = 0; i < clearKeys.length; i++) {\r\n                if (allKeys.includes(clearKeys[i])) {\r\n                    remove(clearKeys[i])\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 返回本地缓存占用大小\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const size = function () {\r\n    return bytesToSize(JSON.stringify(localStorage).length)\r\n}\r\n","/*\r\n * @Description: DOM 相关\r\n * @Author: shufei\r\n * @Date: 2020-11-11 19:15:56\r\n * @LastEditTime: 2020-12-07 14:13:37\r\n * @LastEditors: shufei\r\n */\r\n/**\r\n * @description: 绑定事件\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const bindEvent = function (obj, ev, fn) {\r\n    obj.addEventListener ? obj.addEventListener(ev, fn, false) : obj.attachEvent('on' + ev, fn)\r\n}\r\n\r\n/**\r\n * @description: 解绑事件\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const unbindEvent = function (obj, ev, fn) {\r\n    obj.removeEventListener ? obj.removeEventListener(ev, fn, false) : obj.detachEvent('on' + ev, fn)\r\n}\r\n\r\n/**\r\n * @description: 底部是否可见\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const bottomVisible = function () {\r\n    return document.documentElement.clientHeight + window.scrollY >= (document.documentElement.scrollHeight || document.documentElement.clientHeight)\r\n}\r\n\r\n/**\r\n * @description: 顺滑的滚动到顶部\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const scrollToTop = function () {\r\n    const c = document.documentElement.scrollTop || document.body.scrollTop\r\n    if (c > 0) {\r\n        window.requestAnimationFrame(scrollToTop)\r\n        window.scrollTo(0, c - c / 8)\r\n    }\r\n}\r\n/**\r\n * @description: 顺滑的滚动到当前元素\r\n * @param {Element} element\r\n */\r\nexport const smoothScroll = function (element) {\r\n    return document.querySelector(element).scrollIntoView({ behavior: 'smooth' })\r\n}\r\n/**\r\n * @description: 获取元素的滚动位置坐标\r\n * @param {Elemnt} el\r\n */\r\nexport const getScrollPosition = function (el = window) {\r\n    return {\r\n        x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,\r\n        y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop\r\n    }\r\n}\r\n/**\r\n * @description:防抖\r\n * @param { Function } func : 防抖的事件响应函数\r\n * @param { Number } wait ：事件响应函数执行需求的单位时间\r\n * @param { Boolean } immediate ：是否立即执行\r\n * @return 内部函数执行结果（返回的对象身上可以调用取消功能）\r\n */\r\nexport const debounce = function (func, wait, immediate) {\r\n    let timeout\r\n    let debounced = function () {\r\n        let arg = arguments\r\n        let context = this\r\n        if (timeout) clearTimeout(timeout)\r\n        if (immediate) {\r\n            let callNow = !timeout\r\n            timeout = setTimeout(function () {\r\n                timeout = null\r\n            }, wait)\r\n            if (callNow) func.apply(context, arg)\r\n        } else {\r\n            timeout = setTimeout(function () {\r\n                func.apply(context, arg)\r\n            }, wait)\r\n        }\r\n    }\r\n    debounced.cancel = function () {\r\n        clearTimeout(timeout)\r\n        timeout = null\r\n    }\r\n    return debounced\r\n}\r\n\r\n/**\r\n * @description:节流\r\n * @param { Function } func : 节流的事件响应函数\r\n * @param { Number } wait ：事件响应函数执行需求的频率时间\r\n * @param { Object } options ：配置对象，包含两个值 immediate（是否立即执行）和 trailing（最后是否还执行一次）\r\n */\r\nexport const throttle = function (func, wait, options) {\r\n    let timeout, context, args\r\n    let old = 0 //之前的时间\r\n    if (!options) options = {}\r\n    return function () {\r\n        context = this\r\n        args = arguments\r\n        // 获取当前的时间戳\r\n        let now = new Date().valueOf()\r\n        if (options.leading === false && !old) {\r\n            old = now\r\n        }\r\n        if (now - old > wait) {\r\n            // 第一次会立即执行\r\n            if (timeout) {\r\n                clearTimeout(timeout)\r\n                timeout = null\r\n            }\r\n            func.apply(context, args)\r\n            old = now\r\n        } else if (!timeout && options.trailing !== false) {\r\n            // 最后一次也会执行\r\n            timeout = setTimeout(() => {\r\n                old = new Date().valueOf()\r\n                timeout = null\r\n                func.apply(context, args)\r\n            }, wait)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 返回指定元素的生效样式\r\n * @param {Element} el\r\n * @param {String} attr\r\n */\r\nexport const getStyle = function (el, attr) {\r\n    el = typeof el === 'string' ? document.querySelector(el) : el\r\n    if (!el) return\r\n    if (attr == 'left') {\r\n        return el.offsetLeft\r\n    } else if (attr == 'top') {\r\n        return el.offsetTop\r\n    } else if (attr == 'width') {\r\n        return el.offsetWidth\r\n    } else if (attr == 'height') {\r\n        return el.offsetHeight\r\n    } else {\r\n        return el.currentStyle ? el.currentStyle[attr] : getComputedStyle(el)[attr]\r\n    }\r\n}\r\n\r\n/**\r\n * 隐藏所有的指定标签\r\n * @param  {...any} el\r\n */\r\nexport const hide = function (...el) {\r\n    ;[...el].forEach(e => (e.style.display = 'none'))\r\n}\r\n\r\n/**\r\n * 随机十六进制颜色\r\n */\r\nexport const randomHexColorCode = function () {\r\n    let n = (Math.random() * 0xfffff * 1000000).toString(16)\r\n    return '#' + n.slice(0, 6)\r\n}\r\n\r\n/**\r\n * 获取不同类型变量的字节长度\r\n * @param {any} val\r\n */\r\nexport const size = function (val) {\r\n    return Array.isArray(val) ? val.length : val && typeof val === 'object' ? val.size || val.length || Object.keys(val).length : typeof val === 'string' ? new Blob([val]).size : 0\r\n}\r\n/**\r\n * @description:\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const bytesToSize = function (bytes) {\r\n    if (!bytes) return ''\r\n    if (bytes === 0) return '0 B'\r\n    let k = 1024\r\n    let sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n    let i = Math.floor(Math.log(bytes) / Math.log(k))\r\n    let num = bytes / Math.pow(k, i)\r\n    return num.toFixed(2) + ' ' + sizes[i]\r\n}\r\n/**\r\n *  JSON 转 fromData\r\n *  @param { Object } o 需要转成formData 的对象\r\n */\r\nexport const jsonToFromData = function (o) {\r\n    let ret = Object.keys(o).reduce((p, c) => !p.append(c, o[c]) && p, new FormData())\r\n    ret.check = () => o\r\n    return ret\r\n}\r\n\r\n/**\r\n * 主动触发DOM身上存在的方法\r\n * @param {Element} Node\r\n * @param {String} EventType\r\n */\r\nexport const trigger = function (Node, EventType) {\r\n    if (EventType in Node) Node[EventType]()\r\n}\r\n\r\n/**\r\n * 主动触发自定义方法\r\n * @param {Element} node\r\n * @param {String} type\r\n */\r\nexport const fireEvent = function (node, type) {\r\n    let event = document.createEvent('Event')\r\n    event.initEvent(type, true, true)\r\n    node.dispatchEvent(event)\r\n}\r\n\r\n/**\r\n * 回到顶部\r\n * 回到顶部元素的Id\r\n * @param {String} btnId\r\n */\r\nexport const backTop = function (btnId, offset = 100) {\r\n    let btn = document.getElementById(btnId)\r\n    let d = document.documentElement\r\n    let b = document.body\r\n    window.onscroll = set\r\n    btn.style.display = 'none'\r\n    btn.onclick = function () {\r\n        btn.style.display = 'none'\r\n        window.onscroll = null\r\n        this.timer = setInterval(function () {\r\n            d.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1)\r\n            b.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1)\r\n            if (d.scrollTop + b.scrollTop == 0) clearInterval(btn.timer, (window.onscroll = set))\r\n        }, 10)\r\n    }\r\n    function set() {\r\n        btn.style.display = d.scrollTop + b.scrollTop > offset ? 'block' : 'none'\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 缓冲动画：left => 从左向右作缓冲动画运动 top => 从上向下作缓冲动画运动 负值可以达到4个方向的缓冲动画\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const bufferAnimation = function (el, target, direction = 'left') {\r\n    el = typeof el === 'string' ? document.querySelector(el) : el\r\n    if (!el) return\r\n    let offset = direction === 'left' ? 'offsetLeft' : 'offsetTop'\r\n    //清除历史定时器\r\n    clearInterval(el.timer)\r\n    //开启定时器\r\n    el.timer = setInterval(function () {\r\n        //获取步长 确定移动方向(正负值) 步长应该是越来越小的，缓动的算法。\r\n        var step = Math.ceil((target - el[offset]) / 10)\r\n        //到达目标位置\r\n        if (el[offset] == target) {\r\n            //清除定时器\r\n            clearInterval(el.timer)\r\n        } else {\r\n            el.style[direction === 'left' ? 'left' : 'top'] = el[offset] + step + 'px'\r\n        }\r\n    }, 30)\r\n}\r\n\r\n/**\r\n * @description: 匀速动画：\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const constantAnimation = function (el, target, direction = 'left') {\r\n    el = typeof el === 'string' ? document.querySelector(el) : el\r\n    if (!el) return\r\n    let offset = direction === 'left' ? 'offsetLeft' : 'offsetTop'\r\n    //清除历史定时器\r\n    clearInterval(el.timer)\r\n    //匀速度值\r\n    var speed = target > el[offset] ? 5 : -5\r\n    //开启定时器\r\n    el.timer = setInterval(function () {\r\n        //到达目标位置\r\n        if (el[offset] == target) {\r\n            //清除定时器\r\n            clearInterval(el.timer)\r\n        } else {\r\n            el.style[direction] = el[offset] + speed + 'px'\r\n        }\r\n    }, 30)\r\n}\r\n\r\n/**\r\n * 动态添加css文件\r\n * @param {String} cssName : css 名称 不带后缀\r\n * @param {String} prefix  ：css 前缀\r\n */\r\nexport const dynamicAddCss = function (cssName, prefix = '') {\r\n    let link = document.createElement('link')\r\n    link.setAttribute('href', prefix + cssName + '.css')\r\n    link.setAttribute('type', 'text/css')\r\n    document.getElementsByTagName('head')[0].appendChild(link)\r\n}\r\n\r\n/**\r\n * 动态添加 js文件\r\n * @param {Array} scriptUrlArr : 需求动态添加的脚本URL数组\r\n * @param {Function} callback : 回调函数\r\n */\r\nexport const dynamicAddScript = function (scriptUrlArr, callback) {\r\n    scriptUrlArr.forEach(scriptUrl => {\r\n        let script = document.createElement('script')\r\n        script.setAttribute('src', scriptUrl)\r\n        document.body.appendChild(script)\r\n    })\r\n    window.onload = function () {\r\n        callback && callback()\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 判断点击 dom 范围是否是 指定class 或是 class dom下面的孩子dom\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const contains = function (selector, subSelector) {\r\n    return document.querySelector(selector).contains(document.querySelector(subSelector))\r\n}\r\n\r\n/**\r\n * @description: 点击 指定 class dom，只要点击的是 class dom，或是 class dom下面的孩子元素，都返回该 class dom\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const clickTarget = function (target, targetClass, cb) {\r\n    let ret = null\r\n    if (target.classList && target.classList.contains(targetClass)) {\r\n        ret = target\r\n    } else {\r\n        while (target && target.classList && !target.classList.contains(targetClass)) {\r\n            target = target.parentNode\r\n            if (!target.classList) {\r\n                cb && cb()\r\n                return\r\n            }\r\n        }\r\n        ret = target\r\n    }\r\n    cb && cb(ret)\r\n}\r\n\r\n/**\r\n * @description: 获取网页被卷去的位置\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const getScrollXY = function () {\r\n    return document.body.scrollTop\r\n        ? {\r\n              x: document.body.scrollLeft,\r\n              y: document.body.scrollTop\r\n          }\r\n        : {\r\n              x: document.documentElement.scrollLeft,\r\n              y: document.documentElement.scrollTop\r\n          }\r\n}\r\n/**\r\n * 获取HTML中DOM的最高层级z-index函数\r\n */\r\nexport const getMaxZIndex = function () {\r\n    // 获取HTML中所有的DOM\r\n    let divs = document.all || document.querySelectorAll('*')\r\n    return Math.max(...[...divs].map(i => parseInt(getComputedStyle(i).zIndex) || 1))\r\n}\r\n\r\n/**\r\n * @description: 运动框架\r\n * @param :\r\n * @return {*}\r\n * @param {*} obj\r\n * @param {*} attr\r\n * @param {*} target\r\n * @param {*} time\r\n * @param {*} back\r\n */\r\nexport const move = function (obj, attr, target, time, back) {\r\n    var startTime = new Date()\r\n    var startVal = parseInt(getStyle(obj, attr))\r\n    var timer = setInterval(function () {\r\n        var nowTime = new Date()\r\n        var moveVal = parseInt(target) - startVal\r\n        var prop = (nowTime - startTime) / time\r\n        if (prop >= 1) {\r\n            prop = 1\r\n            clearInterval(timer)\r\n            if (PicIndex == PicLi.length - 1) {\r\n                PicIndexLast = 1\r\n                back && back()\r\n                objNum++\r\n                if (objNum == 5) {\r\n                    PicIndex = 1\r\n                    objNum = 0\r\n                }\r\n                prop = NaN\r\n            } else if (PicIndex == 0) {\r\n                PicIndexLast = PicLi.length - 2\r\n                back && back()\r\n                objNum++\r\n                if (objNum == 5) {\r\n                    PicIndex = PicLi.length - 2\r\n                    objNum = 0\r\n                }\r\n                prop = NaN\r\n            }\r\n        }\r\n        obj.style[attr] = prop * moveVal + startVal + 'px'\r\n    }, 20)\r\n}\r\n\r\n/**\r\n * @description: 封装方法-input框只能输入数字 输入框光标可以左右移动 可以backspace\r\n * @param :\r\n * @return {*}\r\n * @param {Element} ele\r\n */\r\nexport const onlyNumber = function (ele) {\r\n    if (ele.length === undefined) {\r\n        ele.onkeydown = function (ev) {\r\n            var oEevent = ev || event\r\n            if (oEevent.keyCode != 8 && oEevent.keyCode != 37 && oEevent.keyCode != 39 && (oEevent.keyCode < 48 || oEevent.keyCode > 57)) return false\r\n        }\r\n    } else {\r\n        for (var i = 0; i < ele.length; i++) {\r\n            ele[i].onkeydown = function (ev) {\r\n                var oEevent = ev || event\r\n                if (oEevent.keyCode != 8 && oEevent.keyCode != 37 && oEevent.keyCode != 39 && (oEevent.keyCode < 48 || oEevent.keyCode > 57)) return false\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @description: 复制\r\n * @param :\r\n * @return {*}\r\n */\r\nexport const copy = function (selector, cb) {\r\n    typeof selector === 'string' ? document.querySelector(selector).select() : selector.select()\r\n    document.execCommand('Copy')\r\n    cb && cb()\r\n}\r\n","/*\r\n * @Description: 本地缓存 localStorage 类 Local\r\n * @Author: shufei\r\n * @Date: 2020-08-24 08:26:55\r\n * @LastEditTime: 2020-12-04 09:31:51\r\n * @LastEditors: shufei\r\n */\r\nimport * as local from './lib/core'\r\nfunction Local() {\r\n    if (!(this instanceof Local)) throw new TypeError('Cannot call a class as a function')\r\n}\r\nLocal.prototype = local\r\nexport default new Local()\r\n"],"names":["isPureoBbject","o","Object","prototype","toString","call","slice","remove","arguments","length","localStorage","removeItem","Array","isArray","every","i","forEach","getExpired","k","getStore","ret","keys","val","hasOwnProperty","Date","startTime","expires","push","len","key","JSON","parse","getItem","error","Local","this","TypeError","args","setItem","stringify","a","b","c","value","keyName","obj","undefined","item","clear","Orgin","setItemEvent","CustomEvent","detail","setKey","window","dispatchEvent","result","getItemEvent","getKey","removeItemEvent","removeKey","expiredArr","clearKeys","allKeys","includes","bytes","Math","floor","log","pow","toFixed","bytesToSize"],"mappings":"qOAM6B,SAAhBA,EAA0BC,SACuB,WAAnDC,OAAOC,UAAUC,SAASC,KAAKJ,GAAGK,MAAM,GAAI,GAqJjC,SAATC,EAAS,GACM,GAApBC,UAAUC,SACkB,iBAFd,EAGVC,aAAaC,WAHH,GAIHC,MAAMC,QAJH,IAAA,EAKOC,MAAM,SAAAC,SAAkB,iBAANA,KALzB,EAMOC,QAAQ,SAAAD,UAAKL,aAAaC,WAAWI,MA4HxC,SAAbE,QAMAC,EALLjB,EAAIkB,IACJC,EAAM,CACFC,KAAM,GACNC,IAAK,QAEJJ,KAAKjB,EACND,EAAcC,EAAEiB,KAAOjB,EAAEiB,GAAGK,eAAe,YACvC,IAAIC,KAASvB,EAAEiB,GAAGO,UAAYxB,EAAEiB,GAAGQ,UACnCN,EAAIC,KAAKM,KAAKT,GACdE,EAAIE,IAAIJ,GAAKjB,EAAEiB,WAIpBE,ECvHJ,IDlDMD,EAAW,eAChBS,EAAMlB,aAAaD,WAClBmB,EAAK,MAAO,WACbR,EAAM,GACDL,EAAI,EAAGA,EAAIa,EAAKb,IAAK,KACtBc,EAAMnB,aAAamB,IAAId,OAEvBK,EAAIS,GAAOC,KAAKC,MAAMrB,aAAasB,QAAQH,IAC7C,MAAOI,GACLb,EAAIS,GAAOnB,aAAasB,QAAQH,WAGjCT,GEvIX,SAASc,SACCC,gBAAgBD,GAAQ,MAAM,IAAIE,UAAU,4CAEtDF,EAAM/B,4DFGa,eACXkC,6BAAW7B,cACI,GAAf6B,EAAK5B,OACLC,aAAa4B,QAAQD,EAAK,GAAsB,iBAAXA,EAAK,GAAiBA,EAAK,GAAKP,KAAKS,UAAUF,EAAK,UACtF,GAAmB,GAAfA,EAAK5B,QAAeT,EAAcqC,EAAK,QACzC,IAAInB,KAAKmB,EAAK,GACf3B,aAAa4B,QAAQpB,EAAwB,iBAAdmB,EAAK,GAAGnB,GAAiBmB,EAAK,GAAGnB,GAAKY,KAAKS,UAAUF,EAAK,GAAGnB,WAUpF,sCAAamB,2BAAAA,sBACxBG,EAAWH,KAARI,EAAQJ,KAALK,EAAKL,QACG,GAAfA,EAAK5B,WACDT,EAAcwC,OACT,IAAItB,KAAKmB,EAAK,GACf3B,aAAa4B,QAAQpB,EAAkB,iBAARsB,EAAEtB,GAAiBsB,EAAEtB,GAAKY,KAAKS,UAAUC,EAAEtB,UAG/E,GAAmB,GAAfmB,EAAK5B,WACK,iBAAN+B,EACP9B,aAAa4B,QAAQE,EAAgB,iBAANC,EAAiBA,EAAIX,KAAKS,UAAUE,SAChE,GAAIzC,EAAcwC,OAChB,IAAItB,KAAKsB,EACV9B,aAAa4B,QACTpB,EACAY,KAAKS,UAAU,CACXd,WAAY,IAAID,KAChBE,QAASe,EACTE,MAAOH,EAAEtB,WAKH,GAAfmB,EAAK5B,QACK,iBAAN+B,GACP9B,aAAa4B,QACTE,EACAV,KAAKS,UAAU,CACXd,WAAY,IAAID,KAChBE,QAASgB,EACTC,MAAOF,UAYR,SAAUxC,GACT,iBAALA,EACPS,aAAaC,WAAWV,GACjBW,MAAMC,QAAQZ,IAAMA,EAAEa,MAAM,SAAAC,SAAiB,iBAALA,KAC/Cd,EAAEe,QAAQ,SAAAa,UAAOnB,aAAaC,WAAWkB,aAQ3B,eACdQ,6BAAW7B,WACI,GAAf6B,EAAK5B,QAAkC,iBAAZ4B,EAAK,IAChC3B,aAAa4B,QAAQD,EAAK,GAAIP,KAAKS,UAAUF,EAAK,UAQvC,SAAUO,OAErBC,EAAM1B,WACLjB,OAAOmB,KAAKwB,QAGMC,IAAZF,EAAwBC,EAAMA,EAAID,GAFlC,WAMK,SAAUf,OACtBkB,EAAOrC,aAAasB,QAAQH,OAG5BkB,EAAOjB,KAAKC,MAAMgB,GACpB,MAAOd,WAKLc,GAAQA,EAAKtB,UAET,IAAID,KAASuB,EAAKtB,UAAYsB,EAAKrB,SACnChB,aAAaC,WAAWkB,IACjB,GAEAkB,EAAKJ,MAGTI,oBAyBM,WACjBrC,aAAasC,oCAuBgB,WAEL,IAAAC,EASAA,EAUGA,EAnB3BvC,aAAa4B,SAAWW,EAMrBvC,aAAa4B,QALL,SAAUT,EAAKc,OACdO,EAAe,IAAIC,YAAY,eAAgB,CAAEC,OAAQ,CAAEC,OAAQxB,EAAKc,MAAAA,KAC5EW,OAAOC,cAAcL,GACrBD,EAAM5C,KAAK8B,KAAMN,EAAqB,iBAATc,EAAoBA,EAAQb,KAAKS,UAAUI,MAKhFjC,aAAasB,SAAWiB,EAOrBvC,aAAasB,QANL,SAAUH,OACT2B,EAAS1B,KAAKC,MAAMkB,EAAM5C,KAAK8B,KAAMN,IACrC4B,EAAe,IAAIN,YAAY,eAAgB,CAAEC,OAAQ,CAAEM,OAAQ7B,EAAKc,MAAOa,YACnFF,OAAOC,cAAcE,GACdD,IAKf9C,aAAaC,YAAcsC,EAMxBvC,aAAaC,WALL,SAAUkB,OACT8B,EAAkB,IAAIR,YAAY,kBAAmB,CAAEC,OAAQ,CAAEQ,UAAW/B,KAChFyB,OAAOC,cAAcI,GACrBV,EAAM5C,KAAK8B,KAAMN,uBASG,WAEJ,IAAAoB,EAAxBvC,aAAa4B,SAAWW,EAMrBvC,aAAa4B,QALL,SAAUT,EAAKc,OACdO,EAAe,IAAIC,YAAY,eAAgB,CAAEC,OAAQ,CAAEC,OAAQxB,EAAKc,MAAAA,KAC5EW,OAAOC,cAAcL,GACrBD,EAAM5C,KAAK8B,KAAMN,EAAqB,iBAATc,EAAoBA,EAAQb,KAAKS,UAAUI,wBASpD,WAEJ,IAAAM,EAAxBvC,aAAasB,SAAWiB,EAOrBvC,aAAasB,QANL,SAAUH,OACT2B,EAAS1B,KAAKC,MAAMkB,EAAM5C,KAAK8B,KAAMN,IACrC4B,EAAe,IAAIN,YAAY,eAAgB,CAAEC,OAAQ,CAAEM,OAAQ7B,EAAKc,MAAOa,YACnFF,OAAOC,cAAcE,GACdD,yBASgB,WAEJ,IAAAP,EAA3BvC,aAAaC,YAAcsC,EAMxBvC,aAAaC,WALL,SAAUkB,OACT8B,EAAkB,IAAIR,YAAY,kBAAmB,CAAEC,OAAQ,CAAEQ,UAAW/B,KAChFyB,OAAOC,cAAcI,GACrBV,EAAM5C,KAAK8B,KAAMN,oBAUA,eAGhBX,EAFLjB,EAAIkB,IACJC,EAAM,OACDF,KAAKjB,EACND,EAAcC,EAAEiB,KAAOjB,EAAEiB,GAAGK,eAAe,aAC3CH,EAAIF,GAAKjB,EAAEiB,WAGZE,qBAQsB,eAGpBF,EAFLjB,EAAIkB,IACJ0C,EAAa,OACR3C,KAAKjB,EACND,EAAcC,EAAEiB,KAAOjB,EAAEiB,GAAGK,eAAe,YAC3CsC,EAAWlC,KAAKT,UAGjB2C,6BA8BiB,SAAUC,OAE9BC,EAAU9C,IAAaI,QAEtBb,UAAUC,WAGc,iBAAdqD,GAA0BC,EAAQC,SAASF,GAClDvD,EAAOuD,QACJ,GAAIlD,MAAMC,QAAQiD,IAAcA,EAAUrD,WACxC,IAAIM,EAAI,EAAGA,EAAI+C,EAAUrD,OAAQM,IAC9BgD,EAAQC,SAASF,EAAU/C,KAC3BR,EAAOuD,EAAU/C,SAP7BgD,EAAQtD,QAAUF,EAAOwD,SAmBb,kBCvJO,SAAUE,OAC5BA,EAAO,MAAO,MACL,IAAVA,EAAa,MAAO,UAGpBlD,EAAImD,KAAKC,MAAMD,KAAKE,IAAIH,GAASC,KAAKE,IAFlC,cAGEH,EAAQC,KAAKG,IAHf,KAGsBtD,IACnBuD,QAAQ,GAAK,IAHZ,CAAC,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAGxBvD,GDiJ7BwD,CAAYzC,KAAKS,UAAU7B,cAAcD,WEjUrC,IAAIyB"}