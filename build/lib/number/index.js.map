{"version":3,"file":"index.js","sources":["../../../src/lib/number/round.js","../../../src/lib/number/calc.js","../../../src/lib/number/isNum.js","../../../src/lib/number/index.js","../../../src/lib/number/add.js","../../../src/lib/number/devide.js","../../../src/lib/number/fmtNum.js","../../../src/lib/number/multiply.js","../../../src/lib/number/subtract.js","../../../src/lib/number/isInteger.js"],"sourcesContent":["/**\n * 四舍五入到指定位数\n * @param {Number} n:小数\n * @param {Number} decimals ：四舍五入到指定位数\n */\nconst round = function (n, decimals) {\n    if (decimals === undefined) return n\n    return Number(Math.round(n + 'e' + (decimals || 0)) + 'e-' + (decimals || 0))\n}\nexport default round\n\n/**\n *\n * 示例：\n *\n * round(1.23456,1)// 1.2\n * round(1.23456,2)// 1.23\n * round(1.23456,3)// 1.235\n * round(1.23456,4)// 1.2346\n * round(1.23456,5)// 1.23456\n *\n */\n","import round from './round'\n/**\n * 计算方法 calc\n * @param { number } type ：0 加  1 减 2 乘 3 除\n * @param { String | Number } a ：计算数a\n * @param { String | Number } b ：计算数b\n * @param { Number } digit  ：结果保留的位数\n * @return Number | String\n */\nconst calc = function (type, a, b, digit) {\n    let r1, r2\n    try {\n        r1 = a.toString().split('.')[1].length\n    } catch (e) {\n        r1 = 0\n    }\n    try {\n        r2 = b.toString().split('.')[1].length\n    } catch (e) {\n        r2 = 0\n    }\n    let maxLen = Math.pow(10, Math.max(r1, r2))\n    let tyeps = [\n        round((Math.round(maxLen * a) + Math.round(maxLen * b)) / maxLen, digit), //加\n        round((Math.round(maxLen * a) - Math.round(maxLen * b)) / maxLen, digit), //减\n        round((Math.round(maxLen * a) * Math.round(maxLen * b)) / (maxLen * maxLen), digit), //乘\n        round(Math.round(maxLen * a) / Math.round(maxLen * b), digit) //除\n    ]\n    let str = String(round(tyeps[type], digit || 0))\n    if (digit) {\n        if (str.includes('.')) return str.split('.')[0] + '.' + str.split('.')[1].padEnd(digit, 0)\n        return (str + '.').padEnd((str + '.').length + digit, 0)\n    } else {\n        return tyeps[type]\n    }\n}\nexport default calc\n\n/**\n * 示例：\n *\n * // 减法 -\n * calc(0,2,2,2) //'0.00'\n * // 加法 +\n * calc(1,2,2,2) //'4.00'\n * // 乘法 ×\n * calc(2,2,3,2) //'6.00'\n * // 除法 ÷\n * calc(3,2,3,2) //'0.67'\n *\n *\n *\n */\n","/**\n * 判断是否是有效数字 不包含NaN\n * 是否有效数字：排除 NaN Infinity，数字字符串 或是 数字，都为有效数字\n */\nconst isNum = function (n) {\n    return typeof n == 'symbol' ? false : !isNaN(parseFloat(n)) && isFinite(n)\n}\nexport default isNum\n\n/**\n *\n * let arr = [{}, [], undefined, null, 123, '123', Symbol('111'), function () {}, new Date(), false, /\\d+/gi, NaN,Infinity]\n * arr.forEach(item => {\n *        console.log(isNum(item))\n *  })\n * // 4false 2true 7false\n *\n *\n *\n *\n */\n","import add from './add'\nimport calc from './calc'\nimport devide from './devide'\nimport fmtNum from './fmtNum'\nimport isNum from './isNum'\nimport multiply from './multiply'\nimport round from './round'\nimport subtract from './subtract'\nimport isInteger from './isInteger'\nexport default {\n    add,\n    calc,\n    devide,\n    fmtNum,\n    isNum,\n    multiply,\n    round,\n    subtract,\n    isInteger\n}\n","import calc from './calc'\n/**\n * 两数相加\n * @param {Number} a :加数\n * @param {Number} b ：被加数\n * @param {Number} digit ：结果保留位数\n */\nconst add = function (a, b, digit) {\n    return Array.isArray(a) ? (a.length ? a.reduce((p, c) => add(p, c, b), 0) : 0) : calc(0, a, b, digit)\n}\nexport default add\n\n/**\n *\n * 示例：\n *\n * add(0.1,0.2,3) //\"0.300\"\n *\n */\n/**\n *\n * 示例：\n *\n * add([0.1,0.2]) // 0.3\n * add([0.1,0.2],3)     // '0.300'\n * add([0.1,0.2,1,2],3) // '3.300'\n *\n *\n */\n","import calc from './calc'\n/**\n * 两数相除\n * @param {Number} a :除数\n * @param {Number} b ：被除数\n * @param {Number} digit ：结果保留位数\n */\nconst devide = function (a, b, digit) {\n    return Array.isArray(a) ? (a.length >= 2 ? a.reduce((p, c) => devide(p, c, b)) : '') : !a || !b ? '' : calc(3, a, b, digit)\n}\nexport default devide\n\n/**\n * 示例：\n *\n * devide() // \"\"\n * devide(1) // \"\"\n * devide(1,3) // 0.3333333333333333\n * devide(1,3,1) // \"0.3\"\n * devide(1,3,2) // \"0.33\"\n *\n *\n *\n *\n */\n/***\n * 示例：\n *\n * devide() // \"\"\n * devide([]) // \"\"\n * devide([1,3]) // 0.3333333333333333\n * devide([1,3,3]) // 0.1111111111111111\n * devide([1,9]) // 0.1111111111111111\n * devide([1,9],0) // 0\n * devide([1,9],1) // \"0.1\"\n * devide([1,9],2) // \"0.11\"\n * devide([1,9],3) // \"0.111\"\n *\n *\n *\n *\n *\n */\n","import isNum from './isNum'\n/**\n * 数字格式化\n * @param { String | Number } val : 有效数数字\n * @param { Boolean } isThousands : 整数部分是否进行千分位,默认值 false\n * @param { Number } digit : 小数部分四舍五入保留到的位数\n */\nconst fmtNum = function (val, isThousands = false, len) {\n    // 无效值处理，，不符合传入规则的值一律返回空字符串\n    if (val === undefined || val == null) return ''\n    // 无论数字还是字符串数字，最终都转换成字符串数字\n    let str = val + ''\n    // 进行检测str是否是有效的数字,不是有效直接返回空字符串\n    if (!isNum(str)) return ''\n    // 是否是整数\n    let isInt = !str.includes('.')\n    len = len === undefined ? (isInt ? 0 : str.split('.')[1].length) : len\n    // 整数部分\n    let int = len == 0 ? Math.round(str) + '' : isInt ? str.split('.')[0] : (round(str * 1 + '', len) + '').split('.')[0]\n    // str 四舍五入到指定位数\n    str = round(str * 1 + '', len) + ''\n    // 小数部分\n    let dot = len == 0 || isInt ? '' : str.split('.')[1]\n    dot = (dot ? dot : '').padEnd(len, 0)\n    let ret = (isThousands ? int.replace(/(?=(?!\\b)(\\d{3})+$)/g, ',') : int) + (dot.length ? '.' + dot : '')\n    return ret\n}\nexport default fmtNum\n\n/**\n * 示例：\n *\n * fmtNum() // \"\"\n * fmtNum(11111111111.333555) // \"11111111111.333555\"\n * fmtNum(11111111111.333555,false,3) // \"11111111111.334\"\n * fmtNum(11111111111.333555,true) // \"11,111,111,111.333555\"\n * fmtNum(11111111111.333555,true,3) // \"11,111,111,111.334\"\n *\n *\n *\n */\n","import calc from './calc'\n/**\n * 两数相乘\n * @param {*} a :乘数\n * @param {*} b ：被乘数\n * @param {*} digit ：结果保留位数\n */\nconst multiply = function (a, b, digit) {\n    return Array.isArray(a) ? (a.length ? a.reduce((p, c) => multiply(p, c, b), 1) : 0) : calc(2, a, b, digit)\n}\nexport default multiply\n\n/**\n * 示例：\n *\n *\n * multiply(1.1,2.2)    // 2.42\n * multiply(1.13,0.8,0) // 1\n * multiply(1.13,0.8,1) // \"0.9\"\n * multiply(1.13,0.8,2) // \"0.90\"\n * multiply(1.13,0.8,3) // \"0.904\"\n * multiply(1.13,0.8,4) // \"0.9040\"\n *\n *\n *\n *\n *\n */\n","import calc from './calc'\n/**\n * 两数相减\n * @param {Number} a :减数\n * @param {Number} b ：被减数\n * @param {Number} digit ：结果保留位数\n */\nconst subtract = function (a = 0, b = 0, digit) {\n    return Array.isArray(a) ? (a.length ? a.reduce((p, c) => subtract(p, c, b)) : 0) : calc(1, a, b, digit)\n}\nexport default subtract\n\n/**\n * 示例：\n *\n * subtract(0.1,0.12)   // -0.02\n * subtract(0.1,0.12,0) // 0\n * subtract(0.1,0.12,1) // \"0.0\"\n * subtract(0.1,0.12,2) // \"0.02\"\n * subtract(0.1,0.12,3) // \"-0.020\"\n *\n *\n *\n */\n/**\n * 示例：\n *\n *\n * subtract([1.1,3]) // -1.9\n * subtract([1.1,3],1) // \"-1.9\"\n * subtract([1.1,3],2) // \"-1.90\"\n *\n *\n */\n","/**\n * 是否为整数\n * @param {*} number \n * @return {Boolean}\n */\nconst isInteger = number => {\n    return typeof number === 'number' && !isNaN(number) && number % 1 === 0\n}\n\nexport default isInteger\n"],"names":["round","n","decimals","undefined","Number","Math","calc","type","a","b","digit","r1","r2","toString","split","length","e","maxLen","pow","max","tyeps","str","String","includes","padEnd","isNum","_typeof","isNaN","parseFloat","isFinite","add","Array","isArray","reduce","p","c","devide","fmtNum","val","isThousands","len","isInt","int","dot","replace","multiply","subtract","isInteger","number"],"mappings":"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"}