{"version":3,"file":"index.js","sources":["../../../src/lib/object/merge.js","../../../src/lib/base/isType.js","../../../src/lib/base/isEquals.js","../../../src/lib/object/index.js","../../../src/lib/object/clone.js","../../../src/lib/object/deepClone.js","../../../src/lib/object/findKey.js"],"sourcesContent":["/**\n * 合并两个对象\n * @param { Object } f : 需要合并的第一个对象\n * @param { Object } s ：需要合并的第二个对象\n * @return Object 合并后的对象\n */\nconst baseMerge = function (f, s) {\n    for (var i in s) {\n        f[i] = f[i] && f[i].toString() === '[object Object]' ? merge(f[i], s[i]) : (f[i] = s[i])\n    }\n    return f\n}\nconst merge = function () {\n    return Array.from(arguments).reduce((p, c) => baseMerge(p, c), {})\n}\nexport default merge\n","/**\n * @description: 判断传入的值和类型 是否匹配\n * @param  {*} value ：传入的值\n * @param  {String} type ：传入的类型\n * @return {Boolean} false 或 true\n */\nconst isType = function (val, type) {\n    return getType(val) === type\n}\nexport default isType\n","/**\n * @param {any} a：比较的值\n * @param {any} b：其他要比较的值\n */\nconst isEquals = function (a, b) {\n    if (a === b) return true\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\n    if (a.prototype !== b.prototype) return false\n    let keys = Object.keys(a)\n    if (keys.length !== Object.keys(b).length) return false\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\n    return ((Array.isArray(a) && Array.isArray(b)) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\n}\nexport default isEquals\n","import merge from './merge'\nimport clone from './clone'\nimport deepClone from './deepClone'\nimport findKey from './findKey'\n\nexport default {\n    merge,\n    clone,\n    deepClone,\n    findKey\n}\n","/**\n * 浅拷贝\n * @param {*} p\n */\nconst clone = function (p) {\n    var o = {}\n    for (var i in p) {\n        o[i] = p[i]\n    }\n    return o\n}\nexport default clone\n","import isType from '../base/isType'\n\n/**\n * deep clone\n * @param  {[type]} parent object 需要进行克隆的对象\n * @return {[type]}        深克隆后的对象\n */\nconst clone = parent => {\n    // 维护两个储存循环引用的数组\n    const parents = []\n    const children = []\n    const _clone = parent => {\n        if (parent === null) return null\n        if (typeof parent !== 'object') return parent\n\n        let child, proto\n\n        if (isType(parent, 'array')) {\n            // 对数组做特殊处理\n            child = []\n        } else if (isType(parent, 'regexp')) {\n            // 对正则对象做特殊处理\n            child = new RegExp(parent.source, getRegExp(parent))\n            if (parent.lastIndex) child.lastIndex = parent.lastIndex\n        } else if (isType(parent, 'date')) {\n            // 对Date对象做特殊处理\n            child = new Date(parent.getTime())\n        } else {\n            // 处理对象原型\n            proto = Object.getPrototypeOf(parent)\n            // 利用Object.create切断原型链\n            child = Object.create(proto)\n        }\n\n        // 处理循环引用\n        const index = parents.indexOf(parent)\n\n        if (index !== -1) {\n            // 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象\n            return children[index]\n        }\n        parents.push(parent)\n        children.push(child)\n\n        for (const i in parent) {\n            // 递归\n            child[i] = _clone(parent[i])\n        }\n\n        return child\n    }\n    return _clone(parent)\n}\n\n/**\n * 对象深度克隆,\n * JSON.stringify深度克隆对象\n * 无法对函数 、RegExp等特殊对象的克隆,\n * 会抛弃对象的constructor,所有的构造函数会指向Object\n * 对象有循环引用,会报错\n * @param {Object}  obj 克隆的对象\n */\nconst deepClone = obj => {\n    return clone(obj)\n}\nexport default deepClone\n","/*\n * @Author: your name\n * @Date: 2021-06-06 13:25:12\n * @LastEditTime: 2021-06-06 14:22:00\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\rutils\\src\\lib\\object\\findKey.js\n */\nimport isEquals from '../base/isEquals'\nconst findKey = function (o, v) {\n    for (let k in o) {\n        if ((typeof v === 'function' && v(o[k])) || (Array.isArray(v) && o[k][v[0]] === v[1]) || (typeof v === 'string' && v in o[k]) || isEquals(o[k], v)) {\n            return k\n        }\n    }\n}\nexport default findKey\n"],"names":["merge","Array","from","arguments","reduce","f","s","i","toString","isType","val","type","getType","isEquals","a","b","Date","getTime","_typeof","prototype","keys","Object","length","isArray","every","k","o","call","slice","clone","p","deepClone","obj","parents","children","_clone","parent","child","RegExp","source","getRegExp","lastIndex","proto","getPrototypeOf","create","index","indexOf","push","findKey","v"],"mappings":"sOAMA,IAMMA,EAAQ,kBACHC,MAAMC,KAAKC,WAAWC,OAPf,SAAUC,EAAGC,OACtB,IAAIC,KAAKD,EACVD,EAAEE,GAAKF,EAAEE,IAA0B,oBAApBF,EAAEE,GAAGC,WAAmCR,EAAMK,EAAEE,GAAID,EAAEC,IAAOF,EAAEE,GAAKD,EAAEC,UAElFF,GAGwD,0OCPpD,SAATI,EAAmBC,EAAKC,UACnBC,QAAQF,KAASC,ECHX,SAAXE,EAAqBC,EAAGC,MACtBD,IAAMC,EAAG,OAAO,KAChBD,aAAaE,MAAQD,aAAaC,KAAM,OAAOF,EAAEG,YAAcF,EAAEE,cAChEH,IAAMC,GAAmB,WAAbG,EAAOJ,IAA+B,WAAbI,EAAOH,GAAiB,OAAOD,IAAMC,KAC3ED,EAAEK,YAAcJ,EAAEI,UAAW,OAAO,MACpCC,EAAOC,OAAOD,KAAKN,UACnBM,EAAKE,SAAWD,OAAOD,KAAKL,GAAGO,UAE1BrB,MAAMsB,QAAQT,IAAMb,MAAMsB,QAAQR,IAAmB,UAAXJ,EAAKG,IAA6B,UAAXH,EAAKI,KAAoBK,EAAKI,MAAM,SAAAC,UAAKZ,EAASC,EAAEW,GAAIV,EAAEU,OADzH,SAAPd,EAAOe,UAAKL,OAAOF,UAAUX,SAASmB,KAAKD,GAAGE,MAAM,GAAI,UCNjD,CACX5B,MAAAA,EACA6B,MCHU,SAAUC,OAEXvB,EADLmB,EAAI,OACCnB,KAAKuB,EACVJ,EAAEnB,GAAKuB,EAAEvB,UAENmB,GDDPK,UEsDc,SAAAC,UArDRC,EAAU,GACVC,EAAW,GACF,SAATC,EAASC,MACI,OAAXA,EAAiB,OAAO,QACN,WAAlBlB,EAAOkB,GAAqB,OAAOA,MAEnCC,EAEA5B,EAAO2B,EAAQ,SAEfC,EAAQ,GACD5B,EAAO2B,EAAQ,WAEtBC,EAAQ,IAAIC,OAAOF,EAAOG,OAAQC,UAAUJ,IACxCA,EAAOK,YAAWJ,EAAMI,UAAYL,EAAOK,YAG/CJ,EAFO5B,EAAO2B,EAAQ,QAEd,IAAIpB,KAAKoB,EAAOnB,YAGxByB,EAAQrB,OAAOsB,eAAeP,GAEtBf,OAAOuB,OAAOF,QAafnC,EATLsC,EAAQZ,EAAQa,QAAQV,OAEf,IAAXS,SAEOX,EAASW,OAKTtC,KAHX0B,EAAQc,KAAKX,GACbF,EAASa,KAAKV,GAEED,EAEZC,EAAM9B,GAAK4B,EAAOC,EAAO7B,WAGtB8B,EAEJF,CAYMH,GAxDH,IAEJC,EACAC,GFDNc,QGAY,SAAUtB,EAAGuB,OACpB,IAAIxB,KAAKC,KACQ,mBAANuB,GAAoBA,EAAEvB,EAAED,KAASxB,MAAMsB,QAAQ0B,IAAMvB,EAAED,GAAGwB,EAAE,MAAQA,EAAE,IAAqB,iBAANA,GAAkBA,KAAKvB,EAAED,IAAOZ,EAASa,EAAED,GAAIwB,UACrIxB"}