{"version":3,"file":"index.js","sources":["../../../src/lib/base/isEquals.js","../../../src/lib/array/index.js","../../../src/lib/array/union.js","../../../src/lib/array/intersection.js","../../../src/lib/array/archive.js","../../../src/lib/array/arrayFill.js","../../../src/lib/array/arrayToObject.js","../../../src/lib/array/arrayToTree.js","../../../src/lib/array/delBy.js","../../../src/lib/array/except.js","../../../src/lib/array/exchangePostion.js","../../../src/lib/array/flatten.js","../../../src/lib/array/group.js","../../../src/lib/array/indexOfAll.js","../../../src/lib/array/insetPostion.js","../../../src/lib/array/isRepeat.js","../../../src/lib/array/mean.js","../../../src/lib/array/range.js","../../../src/lib/array/rangeRandom.js","../../../src/lib/array/rangeScopeStartZore.js","../../../src/lib/array/rangeStep.js","../../../src/lib/array/sample.js","../../../src/lib/array/sum.js","../../../src/lib/array/timesTotal.js","../../../src/lib/array/unique.js"],"sourcesContent":["/**\n * @param {any} a：比较的值\n * @param {any} b：其他要比较的值\n */\nconst isEquals = function (a, b) {\n    if (a === b) return true\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\n    if (a.prototype !== b.prototype) return false\n    let keys = Object.keys(a)\n    if (keys.length !== Object.keys(b).length) return false\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\n    return ((Array.isArray(a) && Array.isArray(b)) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\n}\nexport default isEquals\n","import archive from './archive'\nimport arrayFill from './arrayFill'\nimport arrayToObject from './arrayToObject'\nimport arrayToTree from './arrayToTree'\nimport delBy from './delBy'\nimport except from './except'\nimport exchangePostion from './exchangePostion'\nimport flatten from './flatten'\nimport group from './group'\nimport indexOfAll from './indexOfAll'\nimport insetPostion from './insetPostion'\nimport intersection from './intersection'\nimport mean from './mean'\nimport range from './range'\nimport rangeRandom from './rangeRandom'\nimport rangeScopeStartZore from './rangeScopeStartZore'\nimport rangeStep from './rangeStep'\nimport sample from './sample'\nimport sum from './sum'\nimport timesTotal from './timesTotal'\nimport unique from './unique'\nimport union from './union'\nimport isRepeat from './isRepeat'\n/**\n * 数组\n */\nexport default {\n    union,\n    intersection,\n    archive,\n    arrayFill,\n    arrayToObject,\n    arrayToTree,\n    delBy,\n    except,\n    exchangePostion,\n    flatten,\n    group,\n    indexOfAll,\n    insetPostion,\n    isRepeat,\n    mean,\n    range,\n    rangeRandom,\n    rangeScopeStartZore,\n    rangeStep,\n    sample,\n    sum,\n    timesTotal,\n    unique\n}\n","/**\n * @description: 求数组并集\n * @param  {Array} a ：传入的数组a\n * @param  {Array} b ：传入的数组b\n * @return {Array} 两数组的并集\n * \n * \n * \n * \n * // 场景1：\nlet a = [1, 2, 3, 4, 5]\nlet b = [1, 2, 4, 5, 6]\n\nunion(a, b) //[1,2,3,4,5,6]\n\n// 场景2：\nlet a1 = [\n    { id: 1, name: '张三', age: 20 },\n    { id: 2, name: '李四', age: 21 },\n    { id: 3, name: '小二', age: 23 }\n]\nlet b1 = [\n    { id: 2, name: '李四', age: 21 },\n    { id: 4, name: '小明', age: 24 },\n    { id: 5, name: '小红', age: 25 }\n]\n\n// 通过 id 获取并集\n\nunion(a1, b1, 'id')\n\n\n[\n  {id: 1, name: \"张三\", age: 20}\n  {id: 2, name: \"李四\", age: 21}\n  {id: 3, name: \"小二\", age: 23}\n  {id: 4, name: \"小明\", age: 24}\n  {id: 5, name: \"小红\", age: 25}\n]\n * \n * \n */\n\nconst union = function (a, b, k) {\n    return a.concat(b.filter(i => (k ? !a.map(i => i[k]).includes(i[k]) : !a.includes(i))))\n}\n\nexport default union\n","/**\n * @description: 求数组交集\n * @param  {Array} a ：传入的数组a\n * @param  {Array} b ：传入的数组b\n * @return {Array} 两数组的交集\n * \n * \n * \n * \n// 场景1：\nlet a = [1, 2, 3, 4, 5]\nlet b = [1, 2, 4, 5, 6]\n\nintersection(a, b) // [1,2,4,5]\n\n// 场景2：\nlet a1 = [\n    { id: 1, name: '张三', age: 20 },\n    { id: 2, name: '李四', age: 21 },\n    { id: 3, name: '小二', age: 23 }\n]\nlet b1 = [\n    { id: 2, name: '李四', age: 21 },\n    { id: 4, name: '小明', age: 24 },\n    { id: 5, name: '小红', age: 25 }\n]\n\nintersection(a1, b1, 'id') //[ { id: 2, name: '李四', age: 21 }]\n * \n * \n * \n */\nconst intersection = function (a, b, k) {\n    return a.filter(t => (k ? b.map(i => i[k]).includes(t[k]) : b.includes(t)))\n}\nexport default intersection\n","/**\n * @description: 对一维 json 数组进行归档（根据 key）\n * @param {Array} arr:一维数组\n * @param {String} key：key 字符串\n */\nconst archive = function (arr, key) {\n    return Array.from(new Set(arr.map(i => i[key]))).reduce((p, c) => (p.push(arr.filter(i => i[key] === c)), p), [])\n}\nexport default archive\n\n/***\n *\n * 示例：\n *\n * let books = [ {date:'1月',name:'地理书'}, {date:'1月',name:'历史书'}, {date:'2月',name:'化学书'} ]\n *\n * archive( books, 'date') // [[{date:'1月',name:'地理书'},{date:'1月',name:'历史书'}],[ {date:'2月',name:'化学书'}]]\n *\n *\n */\n","/**\n * @description: 生成一个指定长度 每个值都填充为统一的 指定值\n * @param {Number} len ：数组长度\n * @param {any} o：填充的值\n */\nconst arrayFill = function (len, o) {\n    return Array(len).fill(o)\n}\nexport default arrayFill\n\n/**\n * 示例：\n *\n * generate(5,1) // [1,1,1,1,1]\n * generate(3,{name:''}) // [{name:''},{name:''},{name:''}]\n *\n */\n","/**\n * @description: 数组转树\n * @param {Array} arr ：数组\n */\nconst arrayToObject = function (arr) {\n    return Array.from(arr.entries()).reduce((p, c) => ((p[c[0]] = c[1]), p), {})\n}\nexport default arrayToObject\n/**\n * 示例：\n *\n * let arr = [\"a\", \"b\", \"c\"];\n * arrayToObject(arr) // {0: \"a\", 1: \"b\", 2: \"c\"}\n *\n *\n */\n","/**\n * @description: 数组转树\n * @param {Array} arr：需要转树的json数组\n * @param {Number | string} id：树节点 id\n * @param {String} link：父id\n */\nconst arrayToTree = function (arr, id = null, link = 'pid') {\n    return arr.filter(i => i[link] === id).map(i => ({ ...i, children: arrayToTree(arr, i.id, link) }))\n}\nexport default arrayToTree\n","/**\n * @description: 根据条件删除数组中的值\n * @param {Array} arr：被操作的数组\n * @param {any} o：条件\n * @param {Boolean} isChangeOldArr：是否改变原数组\n * @return {Array} 返回处理后的数组\n */\nconst delBy = function (arr, o, isChangeOldArr = false) {\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\n    for (let i = a.length - 1; i >= 0; i--) {\n        if (typeof o === 'function') {\n            o(a[i]) && a.splice(i, 1)\n        } else if (Array.isArray(o)) {\n            o.indexOf(a[i]) > -1 && a.splice(i, 1)\n        } else if (a[i] === o) {\n            a.splice(i, 1)\n        } else if (Object.prototype.toString.call(o).slice(8, -1) === 'Object') {\n            let item = a[i]\n            for (let k in o) {\n                Array.isArray(o[k]) ? o[k].indexOf(item[k]) > -1 && a.splice(i, 1) : o[k] === item[k] && a.splice(i, 1)\n            }\n        }\n    }\n    return a\n}\nexport default delBy\n\n/**\n * 用法1：\n * let a1 = [1, 2, 3, 4, 5, 6]\n * delBy(a1, 2)// [1, 3, 4, 5, 6]\n * a1 // [1, 2, 3, 4, 5, 6]\n * let a1 = [1, 2, 3, 4, 5, 6]\n * delBy(a1, 2, true)// [1, 3, 4, 5, 6]\n * a1 // [1, 3, 4, 5, 6]\n *\n *\n *\n */\n\n/**\n * 用法2：\n * let a1 = [\n *   { id: 1, name: '罗老板', age: 18 },\n *   { id: 2, name: '帆老板', age: 19 },\n *   { id: 3, name: '全老板', age: 20 },\n *    { id: 2, name: '帆老板', age: 19 }\n * ]\n * // 删除 a1 数组中 id 为 2的值\n * delBy(a1, item => item.id === 2) //  等价于 handday.arr.delBy(a1, { id: 2 })\n * console.log(a1)\n * //\n * [\n *     { id: 1, name: '罗老板', age: 18 },\n *    { id: 3, name: '全老板', age: 20 },\n * ]\n *\n *\n *\n *\n *\n */\n\n/**\n * 用法3：\n *\n *\n * let a1 = [\n *    { id: 1, name: '罗老板', age: 18 },\n *     { id: 2, name: '帆老板', age: 19 },\n *     { id: 3, name: '全老板', age: 20 },\n *     { id: 2, name: '帆老板', age: 19 }\n * ]\n * // 删除 只要 id 是 1 或 2的值\n * delBy(a1, { id: [1, 2] })\n * console.log(a1)\n * //\n * [\n *     { id: 3, name: '全老板', age: 20 },\n * ]\n *\n *\n *\n */\n\n/**\n * 用法4：\n *\n *\n * let a1 = [\n *     { id: 1, name: '罗老板', age: 18 },\n *     { id: 2, name: '帆老板', age: 19 },\n *     { id: 3, name: '全老板', age: 20 },\n *     { id: 2, name: '帆老板', age: 19 }\n * ]\n * // 删除 a1 数组中 id值为 2，或 name值为 全老板  PS：注意是或的关系\n * delBy(a1, { id: 2, name: '全老板' })\n * console.log(a1)\n *\n *\n *\n *\n */\n\n/**\n * 用法5：\n *\n *\n * let a1 = [\n *     { id: 1, name: '罗老板', age: 18 },\n *     { id: 2, name: '帆老板', age: 19 },\n *     { id: 3, name: '全老板', age: 20 },\n *     { id: 2, name: '帆老板', age: 19 },\n *     { id: 4, name: '卫老板', age: 22 },\n *     { id: 5, name: '卓老板', age: 21 },\n *     { id: 6, name: '黄老板', age: 23 }\n * ]\n * // 只要 id值为 2 ，name值 是 全老板 或 卫老板，age值是23 ，对应的值都从数组中删除掉\n * delBy(a1, { id: 2, name: ['全老板', '卫老板'], age: 23 })\n * console.log(a1)\n * //\n * [\n * {id: 1, name: \"罗老板\", age: 18}\n * {id: 5, name: \"卓老板\", age: 21}\n * ]\n *\n *\n *\n */\n\n/***\n * 用法6：\n *\n * let a1 = [1, 2, 3, 4, 5, 2]\n * // 删除 给出的数组范围的值\n * delBy(a1, [2, 3, 4])\n * console.log(a1) //[1,5]\n *\n *\n *\n */\n","/**\n * @description: 求数组差集\n * @param  {Array} a ：传入的数组a\n * @param  {Array} b ：传入的数组b\n * @return {Array} 两数组的差集\n * \n * \n * \n * \nlet a = [1, 2, 3, 4, 5]\nlet b = [1, 2, 4, 5, 6]\n​\nexcept(a, b) // [3,6]\n​\nlet a1 = [\n    { id: 1, name: '张三', age: 20 },\n    { id: 2, name: '李四', age: 21 },\n    { id: 3, name: '小二', age: 23 }\n]\nlet b1 = [\n    { id: 2, name: '李四', age: 21 },\n    { id: 4, name: '小明', age: 24 },\n    { id: 5, name: '小红', age: 25 }\n]\n​\nexcept(a1, b1, 'id')\n\n[\n  {id: 1, name: \"张三\", age: 20}\n  {id: 3, name: \"小二\", age: 23}\n  {id: 4, name: \"小明\", age: 24}\n  {id: 5, name: \"小红\", age: 25}\n]\n\n * \n * \n * \n */\nconst except = function (a, b, k) {\n    return [...a, ...b].filter(i => ![a, b].every(t => (k ? t.map(i => i[k]).includes(i[k]) : t.includes(i))))\n}\nexport default except\n","/**\n * @description: 交换数组中任一两个值的位置\n * @param {Array} arr:数组\n * @param {Number} oldIndex：老位置索引\n * @param {Number} newIndex：新位置索引\n * @param {Boolean} isChangeOldArr: 是否改变原数组\n * @return {Array} 返回一个数组\n */\nconst exchangePostion = function (arr, oldIndex, newIndex, isChangeOldArr = false) {\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\n    a.splice(oldIndex, 1, a.splice(newIndex, 1, a[oldIndex])[0])\n    return a\n}\nexport default exchangePostion\n\n/**\n *\n * 示例：\n *\n * let a1 = [1, 2, 3, 4, 5, 6]\n *\n * exchangePostion(a1, 4, 1)// [1, 5, 3, 4, 2, 6]\n *\n * a1 //[1, 2, 3, 4, 5, 6]\n *\n * let a1 = [1, 2, 3, 4, 5, 6]\n *\n * exchangePostion(a1, 4, 1，true)// [1, 5, 3, 4, 2, 6]\n *\n * a1 // [1, 5, 3, 4, 2, 6]\n *\n *\n *\n *\n *\n */\n","/**\n * 指定深度扁平化数组\n * @param {Array} arr :扁平化的数组\n * @param {Number} depth：扁平化的层级\n */\nconst flatten = function (arr, depth = 1) {\n    return arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flatten(v, depth - 1) : v), [])\n}\nexport default flatten\n\n/**\n * 示例：\n *\n * flatten([1, 2, 3, [4, [5, 6, [7]]]]) //[1, 2, 3, 4, [5,6,[7]]]\n *\n * flatten([1, 2, 3, [4, [5, 6, [7]]]], 2) //[1, 2, 3, 4, 5,6,[7]]\n *\n *\n */\n","/**\n * @description: 一维数组转二维数组 (分组)\n * @param {Array} arr:数组\n * @param {Number} num: 平分基数（num 个为一组进行分组（归档））\n */\nconst group = function (arr, num) {\n    return [...Array(Math.ceil(arr.length / num)).keys()].reduce((p, _, i) => (p.push(arr.slice(i * num, (i + 1) * num)), p), [])\n}\nexport default group\n\n/**\n *\n * 示例：\n *\n * group([1,2,3,4,5,6,7,8,9,10],2) // [[1,2],[3,4],[5,6],[7,8],[9.10]]\n *\n * group([1,2,3,4,5,6,7,8,9,10],3) // [[1,2,3],[4,5,6],[7,8,9],[10]]\n *\n *\n *\n *\n *\n */\n","/**\n * 返回数组中某值的所有索引，数组形式返回\n * @param {Array} a:数组\n * @param {String} k: 键名\n * @param {String} v: 键值\n */\nconst indexOfAll = (a, k, v) => a.reduce((p, c, i) => ((v ? c[k] === v : c === k) ? [...p, i] : p), [])\n\nexport default indexOfAll\n\n/**\n * 示例：\n *\n *\n * let a1 = [\n *  { id: 1, name: '张三', age: 20, count: 100 },\n *  { id: 2, name: '李四', age: 21, count: 50 },\n *  { id: 2, name: '大卫', age: 21, count: 50 },\n *  { id: 3, name: '阿呆', age: 23, count: 55 },\n *  { id: 3, name: '阿呆', age: 23, count: 55 }\n * ]\n * indexOfAll([1, 2, 3, 1, 2, 3], 1) // [0,3])\n * indexOfAll(a1, 'id', 3) // [3,4])\n *\n *\n *\n */\n","/**\n * @description: 指定数组中某个索引的值 取出来，再插入到数组的任一位置\n * @param {Array} arr:被操作数组\n * @param {Number} oldIndex：老位置索引\n * @param {Number} newIndex：新位置索引\n * @param {Boolean} isChangeOldArr: 是否改变原数组\n * @return Array 返回一个数组\n */\nconst insetPostion = function (arr, oldIndex, newIndex, isChangeOldArr = false) {\n    let a = isChangeOldArr ? arr : JSON.parse(JSON.stringify(arr))\n    a.splice(newIndex, 0, a.splice(oldIndex, 1)[0])\n    return a\n}\nexport default insetPostion\n\n/**\n * 示例：\n *\n *\n * let a1 = [1, 2, 3, 4, 5, 6]\n *\n * insetPostion(a1, 3, 1) // [1, 4, 2, 3, 5, 6]\n *\n * a1 // [1, 2, 3, 4, 5, 6]\n *\n *\n */\n","import isEquals from '../base/isEquals'\n/**\n * @description: 数组内是否有重复值\n * @param {Array} arr: 被检测的数组\n * @return Boolean\n */\nconst isRepeat = function (arr) {\n    let len = arr.length\n    try {\n        for (let i = 0; i < len; i++) {\n            for (let k = i + 1; k < len; k++) {\n                if (isEquals(arr[i], arr[k])) {\n                    return true\n                }\n            }\n        }\n        return false\n    } catch (e) {\n        return len !== unique(arr).length\n    }\n}\nexport default isRepeat\n\n/**\n *\n * 示例：\n *\n * let a1 = [\n *   { id: 1, name: '张三', age: 20 },\n *   { id: 1, name: '李四', age: 20 },\n *   { id: 3, name: '小明', age: 23 },\n *    { id: 2, name: '大卫', age: 21 },\n *   1,\n *   3,\n *   2,\n *   { 0: 1, 1: 2, 2: 3 },\n *   [1, 2, 3]\n * ]\n * isHasRepeat(a1) // false\n * let a2 = [\n *   { id: 1, name: '张三', age: 20 },\n *   { id: 1, name: '张三', age: 20 },\n *   { id: 1, name: '李四', age: 20 },\n *   { id: 3, name: '小明', age: 23 },\n *   { id: 2, name: '大卫', age: 21 },\n *   1,\n *   3,\n *   2,\n *   { 0: 1, 1: 2, 2: 3 },\n *   [1, 2, 3]\n * ]\n * isHasRepeat(a2) // true\n *\n *\n *\n *\n */\n","/**\n * 数组平均数\n * @param {Array} a:数组\n * @param {Function | String} f:函数 或 key\n */\nconst mean = function (a, f) {\n    return (f ? a.map(typeof f === 'function' ? f : v => v[f]) : a).reduce((acc, val) => acc + val * 1, 0) / a.length\n}\nexport default mean\n\n/**\n * 示例：\n *\n * mean([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], o => o.n) // 5\n * mean([{ n: 4 }, { n: 2 }, { n: 8 }, { n: 6 }], 'n') // 5\n * mean([4, 2, 8, 6]) // 5\n * mean(['4', 2, '8', 6]) //5\n *\n *\n */\n","/**\n * @description: 生成 起止数字间（包含起止数字）的升序数组\n * @param {Number} min : 最小值\n * @param {Number} max ：最大值\n */\nconst range = function (min, max) {\n    return Array.from({ length: max - min + 1 }, (_, i) => i + min)\n}\nexport default range\n\n/**\n * 示例：\n *\n * range(0,10) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n * range(1,9)  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n *\n */\n","/**\n * 生成两数之间指定长度（所需产生的个数）的随机数组\n * @param {Number} min：起始值\n * @param {Number} max：结束值\n * @param {Number} n：指定生成的个数，默认1\n * @param {Boolean} isRepeat：是否重复,默认重复\n */\nconst rangeRandom = function (min = 0, max = 0, n = 1, isRepeat = true) {\n    if (isRepeat) {\n        return Array.from({ length: n }, () => Math.floor(Math.random() * (max - min + 1)) + min)\n    } else {\n        let arr = Array.from({ length: max - min + 1 }, (_, i) => i + min)\n        let num = n > arr.length ? arr.length : n\n        let ret = []\n        while (ret.length != num) {\n            let random = arr[Math.floor(Math.random() * arr.length)]\n            !ret.includes(random) && ret.push(random)\n        }\n        return ret\n    }\n}\nexport default rangeRandom\n/**\n * 示例：\n *\n * rangeRandom(0,10) //\n * rangeRandom(0,10,3) //\n * rangeRandom(0,10,9,false) //\n *\n */\n","/**\n * @description: 生成 最小数字 0 到max最大值 的升序数组\n * @param {Number} max ：最大值\n */\nconst rangeScopeStartZore = function (max) {\n    return [...Object.keys(max).keys()]\n}\nexport default rangeScopeStartZore\n\n/**\n * 示例：\n *\n * rangeScopeStartZore(10) //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n * rangeScopeStartZore(5)  //[0, 1, 2, 3, 4, 5]\n *\n */\n","/**\n * 生成指定范围内指定步长的数组\n * @param {Number} start : 起始值\n * @param {Number} stop : 结束值\n * @param {Number} step : 步长\n */\nconst rangeStep = function (start, stop, step) {\n    return Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + i * step)\n}\nexport default rangeStep\n\n/**\n * 示例：\n *\n * rangeStep(0,19,2) // [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\n * rangeStep(0,19,3) // [0, 3, 6, 9, 12, 15, 18]\n * rangeStep(0,19,4) // [0, 4, 8, 12, 16]\n *\n */\n","/**\n * 指定数组中获取随机数(1 位)\n * 不限 json 数组\n * @param {Array} arr :数组\n */\nconst sample = function (arr) {\n    return arr[Math.floor(Math.random() * arr.length)]\n}\nexport default sample\n\n/**\n *\n * 示例：\n *\n * sample([1,2,3,4,5])//\n *\n * sample([{id:1},{id:2},{id:3}])//\n *\n *\n */\n","/**\n * @description: 求和\n * @param  {Array} a ：传入的数组\n * @return {Number} 和\n */\nconst sum = function (a, k) {\n    return a.reduce((p, c) => p + (k ? c[k] || 0 : c), 0)\n}\nexport default sum\n\n/***\n * \n * \n * \nlet a = [1, 2, 3, 4, 5]\n\nsum(a) // 15\n​\nlet a1 = [\n    { id: 1, name: '张三', age: 20 },\n    { id: 2, name: '李四', age: 21 },\n    { id: 3, name: '小二', age: 23 }\n]\n\nsum(a1, 'age') //64 \n * \n * \n * \n * \n * \n * \n */\n","/**\n * 数组中出现次数统计\n * @param {Array} a：数组\n * @param {String} k：键名 | 键值\n * @param {any} v：键值\n */\nconst timesTotal = (a, k, v) => a.reduce((p, c) => ((v ? c[k] === v : c === k) ? p + 1 : p), 0)\n\nexport default timesTotal\n\n/**\n * 示例：\n *\n * let a1 = [1, 2, 3, 1, 5, 6, 1]\n *\n * timesTotal(a1, 1) // 3\n *\n * timesTotal([{a:1},{a:1}],'a',1) // 2\n *\n */\n","import isEquals from '../base/isEquals'\n/**\n * @description: 数组去重\n * @param {Array} a：需要去重的数组\n * @param {String} k：键名\n */\nconst unique = function (a, k) {\n    let ret = []\n    if (k) {\n        ret = a.reduce((p, c) => (p.map(i => i[k]).includes(c[k]) ? p : [...p, c]), [])\n    } else {\n        for (let i = 0, len = a.length; i < len; i++) {\n            if (i == 0) {\n                ret.push(a[i])\n            } else {\n                if (!ret.some(k => isEquals(k, a[i]))) {\n                    ret.push(a[i])\n                }\n            }\n        }\n    }\n    return ret\n}\nexport default unique\n\n/**\n * 示例：\n * \nlet a = [1, 2, 3, 4, 5, 1, 2, 3]\n\nunique(a) // [1,2,3,4,5]\n\nlet a1 = [\n    { id: 1, name: '张三', age: 20 },\n    { id: 2, name: '李四', age: 21 },\n    { id: 3, name: '小红', age: 23 },\n    { id: 2, name: '李四', age: 21 }\n]\n\nunique(a1)\n//\n[\n{id: 1, name: \"张三\", age: 20},\n{id: 2, name: '李四', age: 21 },\n{id: 3, name: \"小红\", age: 23}\n]\n \n\n * \n * \n */\n"],"names":["isEquals","a","b","Date","getTime","_typeof","prototype","keys","Object","length","Array","isArray","type","every","k","o","toString","call","slice","union","concat","filter","i","map","includes","intersection","t","archive","arr","key","from","Set","reduce","p","c","push","arrayFill","len","fill","arrayToObject","entries","arrayToTree","id","link","children","delBy","JSON","parse","stringify","splice","indexOf","item","except","exchangePostion","oldIndex","newIndex","flatten","depth","v","group","num","_toConsumableArray","Math","ceil","_","indexOfAll","insetPostion","isRepeat","e","unique","mean","f","acc","val","range","min","max","rangeRandom","n","floor","random","ret","rangeScopeStartZore","rangeStep","start","stop","step","sample","sum","timesTotal","some"],"mappings":"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"}