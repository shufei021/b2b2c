{"version":3,"file":"index.js","sources":["../../../src/lib/base/getType.js","../../../src/lib/base/index.js","../../../src/lib/base/isEmpty.js","../../../src/lib/base/isEquals.js","../../../src/lib/base/isArray.js","../../../src/lib/base/isBoolean.js","../../../src/lib/base/isDate.js","../../../src/lib/base/isFunction.js","../../../src/lib/base/isNull.js","../../../src/lib/base/isNumber.js","../../../src/lib/base/isObject.js","../../../src/lib/base/isRegExp.js","../../../src/lib/base/isString.js","../../../src/lib/base/isType.js","../../../src/lib/base/isUndefined.js"],"sourcesContent":["/**\n * @description: 获取数据类型\n * @param {*} value : 传入的值\n */\nconst getType = function getType(value) {\n    return Object.prototype.toString.call(value).slice(8, -1).toLowerCase()\n}\nexport default getType\n","// base\nimport isEmpty from './isEmpty'\nimport isEquals from './isEquals'\nimport isArray from './isArray'\nimport isBoolean from './isBoolean'\nimport isDate from './isDate'\nimport isFunction from './isFunction'\nimport isNull from './isNull'\nimport isNumber from './isNumber'\nimport isObject from './isObject'\nimport isRegExp from './isRegExp'\nimport isString from './isString'\nimport isType from './isType'\nimport isUndefined from './isUndefined'\nexport default {\n    isEmpty,\n    isEquals,\n    isArray,\n    isBoolean,\n    isDate,\n    isFunction,\n    isNull,\n    isNumber,\n    isObject,\n    isRegExp,\n    isString,\n    isType,\n    isUndefined\n}\n","//检查 `value` 是否可能是原型对象。\nconst isPrototype = function (value) {\n    const objectProto = Object.prototype\n    const Ctor = value && value.constructor\n    const proto = (typeof Ctor === 'function' && Ctor.prototype) || objectProto\n    return value === proto\n}\n// 是否有长度\nconst isLength = function (value) {\n    const MAX_SAFE_INTEGER = 9007199254740991 // 2**53-1\n    return typeof value === 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER\n}\nconst isArrayLike = function (value) {\n    return value != null && typeof value !== 'function' && isLength(value.length)\n}\nconst getType = function (o) {\n    return Object.prototype.toString.call(o).slice(8, -1).toLowerCase()\n}\nconst isObjectLike = function (value) {\n    return typeof value === 'object' && value !== null\n}\nconst isArguments = function (value) {\n    return isObjectLike(value) && getType(value) == 'arguments'\n}\n\n/**\n * @param {Array|Object|string} value：要检查的值\n */\nconst isEmpty = function (value) {\n    if (value == null) return true\n    if (isArrayLike(value)) {\n        try {\n            return !value.length\n        } catch (e) {}\n    }\n\n    if (['map', 'set'].includes(getType(value))) return !value.size\n    if (isPrototype(value)) return !Object.keys(value).length\n    const hasOwnProperty = Object.prototype.hasOwnProperty\n    for (const key in value) {\n        if (hasOwnProperty.call(value, key)) return false\n    }\n    return true\n}\nexport default isEmpty\n","/**\n * @param {any} a：比较的值\n * @param {any} b：其他要比较的值\n */\nconst isEquals = function (a, b) {\n    if (a === b) return true\n    if (a instanceof Date && b instanceof Date) return a.getTime() === b.getTime()\n    if (!a || !b || (typeof a !== 'object' && typeof b !== 'object')) return a === b\n    if (a.prototype !== b.prototype) return false\n    let keys = Object.keys(a)\n    if (keys.length !== Object.keys(b).length) return false\n    let type = o => Object.prototype.toString.call(o).slice(8, -1)\n    return ((Array.isArray(a) && Array.isArray(b)) || (type(a) == 'Object' && type(b) == 'Object')) && keys.every(k => isEquals(a[k], b[k]))\n}\nexport default isEquals\n","/**\n * @description: 判断传入的值是否是数组类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isArray = function (value) {\n    return Array.isArray(value)\n}\nexport default isArray\n","/**\n * @description: 判断传入的值是否是布尔类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isBoolean = function (value) {\n    return typeof value === 'boolean'\n}\nexport default isBoolean\n","import getType from './getType'\n/**\n * @description: 判断传入的值是否是日期类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isDate = function (value) {\n    return getType(value) === 'date'\n}\nexport default isDate\n","/**\n * @description: 判断传入的值是否是函数类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isFunction = function (value) {\n    return typeof value === 'function'\n}\nexport default isFunction\n","/**\n * @description: 判断传入的值是否是Null类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isNull = function (value) {\n    return value === null\n}\nexport default isNull\n","// 是否是数字类型\nfunction isNumber(value) {\n    return typeof value === 'number'\n}\nexport default isNumber\n","/*\n * @Description:isObject 是否是对象类型\n *\n * isObject({}) // true\n * isObject(null) // false\n *\n */\nfunction isObject(o) {\n    return getType(o) === 'object'\n}\nexport default isObject\n","import getType from './getType'\n\n// 是否正则类型\nconst isRegExp = function (o) {\n    return getType(o) === 'regexp'\n}\nexport default isRegExp\n","/**\n * @description: 判断传入的值是否是字符串类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isString = function (value) {\n    return typeof value === 'string'\n}\nexport default isString\n","/**\n * @description: 判断传入的值和类型 是否匹配\n * @param  {*} value ：传入的值\n * @param  {String} type ：传入的类型\n * @return {Boolean} false 或 true\n */\nconst isType = function (val, type) {\n    return getType(val) === type\n}\nexport default isType\n","/**\n * @description: 判断传入的值是否是undefined类型\n * @param  {*} value ：传入的值\n * @return {Boolean} false 或 true\n */\nconst isUndefined = function (value) {\n    return typeof value === 'undefined'\n}\nexport default isUndefined\n"],"names":["getType","value","Object","prototype","toString","call","slice","toLowerCase","isEmpty","length","e","objectProto","Ctor","includes","o","size","constructor","keys","key","hasOwnProperty","isEquals","a","b","Date","getTime","_typeof","type","Array","isArray","every","k","isBoolean","isDate","isFunction","isNull","isNumber","isObject","isRegExp","isString","isType","val","isUndefined"],"mappings":"ycAIgB,SAAVA,EAA2BC,UACtBC,OAAOC,UAAUC,SAASC,KAAKJ,GAAOK,MAAM,GAAI,GAAGC,oBCS/C,CACXC,QCaY,SAAUP,MACT,MAATA,EAAe,OAAO,KAhBV,OADUA,EAkBVA,IAjByB,mBAAVA,IAHP,iBAFDA,EAKyCA,EAAMQ,UAHzB,EAATR,GAAcA,EAAQ,GAAK,GAAKA,GAD3C,6BAuBTA,EAAMQ,OAChB,MAAOC,IArBG,IAXUT,EACpBU,EACAC,KAiCF,CAAC,MAAO,OAAOC,UArBGC,EAqBcb,EApB7BC,OAAOC,UAAUC,SAASC,KAAKS,GAAGR,MAAM,GAAI,GAAGC,gBAoBT,OAAQN,EAAMc,QAnCjCd,EAoCVA,EAnCVU,EAAcT,OAAOC,UACrBS,EAAOX,GAASA,EAAMe,YAErBf,KADwB,mBAATW,GAAuBA,EAAKT,WAAcQ,GAiCxC,OAAQT,OAAOe,KAAKhB,GAAOQ,WAExCS,EADLC,EAAiBjB,OAAOC,UAAUgB,mBAC7BD,KAAOjB,KACVkB,EAAed,KAAKJ,EAAOiB,GAAM,OAAO,SAEzC,GD1BPE,SEZa,SAAXA,EAAqBC,EAAGC,MACtBD,IAAMC,EAAG,OAAO,KAChBD,aAAaE,MAAQD,aAAaC,KAAM,OAAOF,EAAEG,YAAcF,EAAEE,cAChEH,IAAMC,GAAmB,WAAbG,EAAOJ,IAA+B,WAAbI,EAAOH,GAAiB,OAAOD,IAAMC,KAC3ED,EAAElB,YAAcmB,EAAEnB,UAAW,OAAO,MACpCc,EAAOf,OAAOe,KAAKI,MACnBJ,EAAKR,SAAWP,OAAOe,KAAKK,GAAGb,OAAQ,OAAO,EACvC,SAAPiB,EAAOZ,UAAKZ,OAAOC,UAAUC,SAASC,KAAKS,GAAGR,MAAM,GAAI,UACnDqB,MAAMC,QAAQP,IAAMM,MAAMC,QAAQN,IAAmB,UAAXI,EAAKL,IAA6B,UAAXK,EAAKJ,KAAoBL,EAAKY,MAAM,SAAAC,UAAKV,EAASC,EAAES,GAAIR,EAAEQ,OFKpIF,QGZY,SAAU3B,UACf0B,MAAMC,QAAQ3B,IHYrB8B,UIbc,SAAU9B,SACA,kBAAVA,GJad+B,OKbW,SAAU/B,SACK,SAAnBD,EAAQC,ILafgC,WMfe,SAAUhC,SACD,mBAAVA,GNediC,OOhBW,SAAUjC,UACJ,OAAVA,GPgBPkC,SQrBJ,SAAkBlC,SACU,iBAAVA,GRqBdmC,SShBJ,SAAkBtB,SACQ,WAAfd,QAAQc,ITgBfuB,SUrBa,SAAUvB,SACD,WAAfd,EAAQc,IVqBfwB,SWpBa,SAAUrC,SACC,iBAAVA,GXoBdsC,OYpBW,SAAUC,EAAKd,UACnB1B,QAAQwC,KAASd,GZoBxBe,YatBgB,SAAUxC,eACF,IAAVA"}